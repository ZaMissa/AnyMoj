{"version":3,"file":"static/js/159.22ae6c10.chunk.js","mappings":"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","sources":["services/anydesk.service.ts","components/AnydeskLaunchButton.tsx","pages/Dashboard.tsx"],"sourcesContent":["import { AnyDeskLaunchResult } from '../types/machine.types';\r\nimport { indexedDBService } from './indexedDB.service';\r\n\r\nclass AnyDeskService {\r\n  /**\r\n   * Launches AnyDesk with the specified machine ID\r\n   */\r\n  async launchAnyDesk(machineId: string): Promise<AnyDeskLaunchResult> {\r\n    try {\r\n      // Get machine details\r\n      const machine = await indexedDBService.getMachine(machineId);\r\n      if (!machine) {\r\n        return {\r\n          success: false,\r\n          method: 'failed',\r\n          error: 'Machine not found'\r\n        };\r\n      }\r\n\r\n      // Log connection attempt\r\n      await indexedDBService.logConnectionAttempt(machineId, 'launch_attempt');\r\n\r\n      // Try AnyDesk URL scheme first\r\n      const anydeskUrl = `anydesk://${machine.anydeskId}`;\r\n      const fallbackUrl = `https://anydesk.com/${machine.anydeskId}`;\r\n\r\n      try {\r\n        // Attempt to open AnyDesk app\r\n        const opened = await this.openAnyDeskApp(anydeskUrl);\r\n        \r\n        if (opened) {\r\n          // Log successful launch attempt\r\n          await indexedDBService.logConnectionAttempt(machineId, 'launch_success', 'AnyDesk app launched');\r\n          \r\n          return {\r\n            success: true,\r\n            method: 'app'\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.log('AnyDesk app not available, trying web fallback');\r\n      }\r\n\r\n      // Fallback to web version\r\n      try {\r\n        window.open(fallbackUrl, '_blank');\r\n        \r\n        // Log web fallback attempt\r\n        await indexedDBService.logConnectionAttempt(machineId, 'launch_attempt', 'Opened web version');\r\n        \r\n        return {\r\n          success: true,\r\n          method: 'web'\r\n        };\r\n      } catch (error) {\r\n        await indexedDBService.logConnectionAttempt(machineId, 'launch_failure', `Web fallback failed: ${error}`);\r\n        \r\n        return {\r\n          success: false,\r\n          method: 'failed',\r\n          error: 'Failed to open AnyDesk app or web version'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('AnyDesk launch error:', error);\r\n      \r\n      // Log failure\r\n      await indexedDBService.logConnectionAttempt(machineId, 'launch_failure', `Launch error: ${error}`);\r\n      \r\n      return {\r\n        success: false,\r\n        method: 'failed',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to open AnyDesk application using URL scheme\r\n   */\r\n  private async openAnyDeskApp(url: string): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      // Create a hidden iframe to attempt the URL scheme\r\n      const iframe = document.createElement('iframe');\r\n      iframe.style.display = 'none';\r\n      iframe.src = url;\r\n      \r\n      // Timeout to detect if the app opened\r\n      const timeout = setTimeout(() => {\r\n        document.body.removeChild(iframe);\r\n        resolve(false);\r\n      }, 2000);\r\n\r\n      // Listen for focus events to detect if app opened\r\n      const handleFocus = () => {\r\n        clearTimeout(timeout);\r\n        document.body.removeChild(iframe);\r\n        window.removeEventListener('focus', handleFocus);\r\n        resolve(true);\r\n      };\r\n\r\n      window.addEventListener('focus', handleFocus);\r\n      document.body.appendChild(iframe);\r\n\r\n      // Also try direct window.location as fallback\r\n      try {\r\n        window.location.href = url;\r\n        setTimeout(() => {\r\n          clearTimeout(timeout);\r\n          document.body.removeChild(iframe);\r\n          window.removeEventListener('focus', handleFocus);\r\n          resolve(true);\r\n        }, 1000);\r\n      } catch (error) {\r\n        // Ignore errors, let the iframe method handle it\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if AnyDesk is likely installed on the system\r\n   */\r\n  async checkAnyDeskAvailability(): Promise<boolean> {\r\n    try {\r\n      // Try to detect AnyDesk installation\r\n      // This is a simple heuristic - in reality, we can't reliably detect\r\n      // if AnyDesk is installed without user interaction\r\n      \r\n      // For now, we'll assume it might be available and let the launch attempt determine\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error checking AnyDesk availability:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets AnyDesk download URL for the current platform\r\n   */\r\n  getAnyDeskDownloadUrl(): string {\r\n    const userAgent = navigator.userAgent.toLowerCase();\r\n    \r\n    if (userAgent.includes('windows')) {\r\n      return 'https://anydesk.com/downloads/windows';\r\n    } else if (userAgent.includes('mac')) {\r\n      return 'https://anydesk.com/downloads/macos';\r\n    } else if (userAgent.includes('linux')) {\r\n      return 'https://anydesk.com/downloads/linux';\r\n    } else if (userAgent.includes('android')) {\r\n      return 'https://play.google.com/store/apps/details?id=com.anydesk.anydeskandroid';\r\n    } else if (userAgent.includes('iphone') || userAgent.includes('ipad')) {\r\n      return 'https://apps.apple.com/app/anydesk/id1114002967';\r\n    }\r\n    \r\n    return 'https://anydesk.com/downloads';\r\n  }\r\n\r\n  /**\r\n   * Formats AnyDesk ID for display (adds spaces for readability)\r\n   */\r\n  formatAnyDeskId(id: string): string {\r\n    // Remove any non-numeric characters\r\n    const cleanId = id.replace(/\\D/g, '');\r\n    \r\n    // Add spaces every 3 digits for readability\r\n    return cleanId.replace(/(\\d{3})(?=\\d)/g, '$1 ');\r\n  }\r\n\r\n  /**\r\n   * Validates AnyDesk ID format\r\n   */\r\n  isValidAnyDeskId(id: string): boolean {\r\n    // AnyDesk IDs are typically 9 digits\r\n    const cleanId = id.replace(/\\D/g, '');\r\n    return cleanId.length === 9 && /^\\d+$/.test(cleanId);\r\n  }\r\n\r\n  /**\r\n   * Shows user-friendly message based on launch result\r\n   */\r\n  getLaunchMessage(result: AnyDeskLaunchResult, machineName: string): string {\r\n    if (result.success) {\r\n      if (result.method === 'app') {\r\n        return `AnyDesk app opened for ${machineName}. If the connection doesn't start automatically, enter the ID: ${result.method}`;\r\n      } else if (result.method === 'web') {\r\n        return `AnyDesk web version opened for ${machineName}. You can also download the AnyDesk app for better experience.`;\r\n      }\r\n    }\r\n    \r\n    return `Failed to launch AnyDesk for ${machineName}. ${result.error || 'Please ensure AnyDesk is installed or try again.'}`;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const anydeskService = new AnyDeskService();\r\n","import React, { useState } from 'react';\r\nimport { anydeskService } from '../services/anydesk.service';\r\nimport { AnyDeskLaunchResult } from '../types/machine.types';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport './AnydeskLaunchButton.css';\r\n\r\ninterface AnydeskLaunchButtonProps {\r\n  machineId: string;\r\n  machineName: string;\r\n  anydeskId: string;\r\n  size?: 'sm' | 'md' | 'lg';\r\n  variant?: 'primary' | 'secondary' | 'icon';\r\n  onLaunchResult?: (result: AnyDeskLaunchResult) => void;\r\n  className?: string;\r\n}\r\n\r\nconst AnydeskLaunchButton: React.FC<AnydeskLaunchButtonProps> = ({\r\n  machineId,\r\n  machineName,\r\n  anydeskId,\r\n  size = 'md',\r\n  variant = 'primary',\r\n  onLaunchResult,\r\n  className = ''\r\n}) => {\r\n  const [isLaunching, setIsLaunching] = useState(false);\r\n  const [lastResult, setLastResult] = useState<AnyDeskLaunchResult | null>(null);\r\n\r\n  const handleLaunch = async () => {\r\n    if (isLaunching) return;\r\n\r\n    try {\r\n      setIsLaunching(true);\r\n      setLastResult(null);\r\n\r\n      const result = await anydeskService.launchAnyDesk(machineId);\r\n      setLastResult(result);\r\n      \r\n      if (onLaunchResult) {\r\n        onLaunchResult(result);\r\n      }\r\n\r\n      // Show user feedback\r\n      const message = anydeskService.getLaunchMessage(result, machineName);\r\n      \r\n      if (result.success) {\r\n        // Show success message briefly\r\n        if (result.method === 'web') {\r\n          alert(`✅ ${message}\\n\\n💡 Tip: Download AnyDesk app for better experience!`);\r\n        } else {\r\n          alert(`✅ ${message}`);\r\n        }\r\n      } else {\r\n        // Show error message with download option\r\n        const shouldDownload = window.confirm(`❌ ${message}\\n\\nWould you like to download AnyDesk?`);\r\n        if (shouldDownload) {\r\n          window.open(anydeskService.getAnyDeskDownloadUrl(), '_blank');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Launch error:', error);\r\n      const errorResult: AnyDeskLaunchResult = {\r\n        success: false,\r\n        method: 'failed',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n      setLastResult(errorResult);\r\n      \r\n      if (onLaunchResult) {\r\n        onLaunchResult(errorResult);\r\n      }\r\n      \r\n      alert(`❌ Failed to launch AnyDesk: ${errorResult.error}`);\r\n    } finally {\r\n      setIsLaunching(false);\r\n    }\r\n  };\r\n\r\n  const getButtonText = () => {\r\n    if (isLaunching) {\r\n      return size === 'sm' ? '...' : 'Launching...';\r\n    }\r\n    \r\n    switch (variant) {\r\n      case 'icon':\r\n        return '🚀';\r\n      case 'secondary':\r\n        return `Connect to ${machineName}`;\r\n      default:\r\n        return 'Launch AnyDesk';\r\n    }\r\n  };\r\n\r\n  const getButtonClass = () => {\r\n    const baseClass = 'anydesk-launch-btn';\r\n    const sizeClass = `anydesk-launch-btn-${size}`;\r\n    const variantClass = `anydesk-launch-btn-${variant}`;\r\n    const stateClass = isLaunching ? 'anydesk-launch-btn-loading' : '';\r\n    const resultClass = lastResult ? `anydesk-launch-btn-${lastResult.success ? 'success' : 'error'}` : '';\r\n    \r\n    return `${baseClass} ${sizeClass} ${variantClass} ${stateClass} ${resultClass} ${className}`.trim();\r\n  };\r\n\r\n  const getButtonIcon = () => {\r\n    if (isLaunching) {\r\n      return <LoadingSpinner size={size === 'sm' ? 'sm' : 'md'} />;\r\n    }\r\n    \r\n    if (lastResult?.success) {\r\n      return '✅';\r\n    }\r\n    \r\n    if (lastResult && !lastResult.success) {\r\n      return '❌';\r\n    }\r\n    \r\n    return '🚀';\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={getButtonClass()}\r\n      onClick={handleLaunch}\r\n      disabled={isLaunching}\r\n      title={`Launch AnyDesk for ${machineName} (ID: ${anydeskId})`}\r\n    >\r\n      <span className=\"anydesk-launch-btn-icon\">{getButtonIcon()}</span>\r\n      <span className=\"anydesk-launch-btn-text\">{getButtonText()}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AnydeskLaunchButton;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Machine } from '../types/machine.types';\r\nimport { indexedDBService } from '../services/indexedDB.service';\r\nimport { useAutoBackupOnChange } from '../hooks/useAutoBackup';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport AnydeskLaunchButton from '../components/AnydeskLaunchButton';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [machines, setMachines] = useState<Machine[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\r\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\r\n  const [hasPasswordFilter, setHasPasswordFilter] = useState<boolean | null>(null);\r\n  const [filteredMachines, setFilteredMachines] = useState<Machine[]>([]);\r\n\r\n  // Auto-backup when machines change\r\n  useAutoBackupOnChange([machines]);\r\n\r\n  const loadMachines = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const allMachines = await indexedDBService.getAllMachines();\r\n      setMachines(allMachines);\r\n    } catch (error) {\r\n      console.error('Failed to load machines:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const filterMachines = useCallback(() => {\r\n    let filtered = machines;\r\n\r\n    // Search term filter\r\n    if (searchTerm.trim()) {\r\n      const searchLower = searchTerm.toLowerCase();\r\n      filtered = filtered.filter(machine =>\r\n        machine.name.toLowerCase().includes(searchLower) ||\r\n        machine.anydeskId.toLowerCase().includes(searchLower) ||\r\n        machine.address?.toLowerCase().includes(searchLower) ||\r\n        machine.notes?.toLowerCase().includes(searchLower) ||\r\n        machine.tags.some(tag => tag.toLowerCase().includes(searchLower)) ||\r\n        machine.categories.some(cat => cat.toLowerCase().includes(searchLower))\r\n      );\r\n    }\r\n\r\n    // Category filter\r\n    if (selectedCategories.length > 0) {\r\n      filtered = filtered.filter(machine =>\r\n        selectedCategories.some(category => machine.categories.includes(category))\r\n      );\r\n    }\r\n\r\n    // Tag filter\r\n    if (selectedTags.length > 0) {\r\n      filtered = filtered.filter(machine =>\r\n        selectedTags.some(tag => machine.tags.includes(tag))\r\n      );\r\n    }\r\n\r\n    // Password filter\r\n    if (hasPasswordFilter !== null) {\r\n      filtered = filtered.filter(machine =>\r\n        hasPasswordFilter ? machine.passwords.length > 0 : machine.passwords.length === 0\r\n      );\r\n    }\r\n\r\n    setFilteredMachines(filtered);\r\n  }, [machines, searchTerm, selectedCategories, selectedTags, hasPasswordFilter]);\r\n\r\n  useEffect(() => {\r\n    loadMachines();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    filterMachines();\r\n  }, [filterMachines]);\r\n\r\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  // Get unique categories and tags from all machines\r\n  const getAllCategories = useCallback(() => {\r\n    const categories = new Set<string>();\r\n    machines.forEach(machine => {\r\n      machine.categories.forEach(category => categories.add(category));\r\n    });\r\n    return Array.from(categories).sort();\r\n  }, [machines]);\r\n\r\n  const getAllTags = useCallback(() => {\r\n    const tags = new Set<string>();\r\n    machines.forEach(machine => {\r\n      machine.tags.forEach(tag => tags.add(tag));\r\n    });\r\n    return Array.from(tags).sort();\r\n  }, [machines]);\r\n\r\n  const handleCategoryToggle = (category: string) => {\r\n    setSelectedCategories(prev =>\r\n      prev.includes(category)\r\n        ? prev.filter(c => c !== category)\r\n        : [...prev, category]\r\n    );\r\n  };\r\n\r\n  const handleTagToggle = (tag: string) => {\r\n    setSelectedTags(prev =>\r\n      prev.includes(tag)\r\n        ? prev.filter(t => t !== tag)\r\n        : [...prev, tag]\r\n    );\r\n  };\r\n\r\n  const clearAllFilters = () => {\r\n    setSearchTerm('');\r\n    setSelectedCategories([]);\r\n    setSelectedTags([]);\r\n    setHasPasswordFilter(null);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"dashboard-loading\">\r\n        <LoadingSpinner size=\"lg\" />\r\n        <p>Loading machines...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"dashboard-header\">\r\n        <h1 className=\"dashboard-title\">Machine Manager</h1>\r\n        \r\n        <div className=\"dashboard-stats\">\r\n          <div className=\"stat-card\">\r\n            <span className=\"stat-number\">{machines.length}</span>\r\n            <span className=\"stat-label\">Total Machines</span>\r\n          </div>\r\n          <div className=\"stat-card\">\r\n            <span className=\"stat-number\">\r\n              {machines.filter(m => m.connectionCount > 0).length}\r\n            </span>\r\n            <span className=\"stat-label\">Connected</span>\r\n          </div>\r\n          <div className=\"stat-card\">\r\n            <span className=\"stat-number\">\r\n              {machines.filter(m => m.lastAccessed).length}\r\n            </span>\r\n            <span className=\"stat-label\">Recently Used</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"search-filter-bar\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search machines by name, ID, address, or tags...\"\r\n          value={searchTerm}\r\n          onChange={handleSearchChange}\r\n          className=\"search-input\"\r\n        />\r\n        \r\n        <div className=\"filter-section\">\r\n          <div className=\"filter-group\">\r\n            <h4>Categories</h4>\r\n            <div className=\"filter-chips\">\r\n              {getAllCategories().map(category => (\r\n                <button\r\n                  key={category}\r\n                  className={`filter-chip ${selectedCategories.includes(category) ? 'active' : ''}`}\r\n                  onClick={() => handleCategoryToggle(category)}\r\n                >\r\n                  {category}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"filter-group\">\r\n            <h4>Tags</h4>\r\n            <div className=\"filter-chips\">\r\n              {getAllTags().map(tag => (\r\n                <button\r\n                  key={tag}\r\n                  className={`filter-chip ${selectedTags.includes(tag) ? 'active' : ''}`}\r\n                  onClick={() => handleTagToggle(tag)}\r\n                >\r\n                  {tag}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"filter-group\">\r\n            <h4>Password</h4>\r\n            <div className=\"filter-chips\">\r\n              <button\r\n                className={`filter-chip ${hasPasswordFilter === true ? 'active' : ''}`}\r\n                onClick={() => setHasPasswordFilter(hasPasswordFilter === true ? null : true)}\r\n              >\r\n                Has Passwords\r\n              </button>\r\n              <button\r\n                className={`filter-chip ${hasPasswordFilter === false ? 'active' : ''}`}\r\n                onClick={() => setHasPasswordFilter(hasPasswordFilter === false ? null : false)}\r\n              >\r\n                No Passwords\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {(selectedCategories.length > 0 || selectedTags.length > 0 || hasPasswordFilter !== null) && (\r\n            <button className=\"clear-filters-btn\" onClick={clearAllFilters}>\r\n              Clear All Filters\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"dashboard-actions\">\r\n        <Link to=\"/machine/new\" className=\"btn btn-primary\">\r\n          <svg className=\"btn-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"/>\r\n            <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"/>\r\n          </svg>\r\n          Add Machine\r\n        </Link>\r\n      </div>\r\n\r\n      {filteredMachines.length === 0 ? (\r\n        <div className=\"empty-state\">\r\n          {machines.length === 0 ? (\r\n            <>\r\n              <div className=\"empty-state-icon\">\r\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\r\n                  <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"/>\r\n                  <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"/>\r\n                  <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"/>\r\n                </svg>\r\n              </div>\r\n              <h3>No machines yet</h3>\r\n              <p>Get started by adding your first machine to manage.</p>\r\n              <Link to=\"/machine/new\" className=\"btn btn-primary\">\r\n                Add Your First Machine\r\n              </Link>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"empty-state-icon\">\r\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\r\n                  <circle cx=\"11\" cy=\"11\" r=\"8\"/>\r\n                  <path d=\"m21 21-4.35-4.35\"/>\r\n                </svg>\r\n              </div>\r\n              <h3>No machines found</h3>\r\n              <p>Try adjusting your search terms.</p>\r\n              <button \r\n                className=\"btn btn-secondary\"\r\n                onClick={() => setSearchTerm('')}\r\n              >\r\n                Clear Search\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"machine-grid\">\r\n          {filteredMachines.map((machine) => (\r\n            <MachineCard key={machine.id} machine={machine} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface MachineCardProps {\r\n  machine: Machine;\r\n}\r\n\r\nconst MachineCard: React.FC<MachineCardProps> = ({ machine }) => {\r\n  const formatLastAccessed = (date?: Date) => {\r\n    if (!date) return 'Never';\r\n    \r\n    const dateObj = new Date(date);\r\n    const now = new Date();\r\n    const diffInHours = Math.floor((now.getTime() - dateObj.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`;\r\n    return dateObj.toLocaleDateString();\r\n  };\r\n\r\n  const handleLaunchResult = (result: any) => {\r\n    // Handle launch result if needed\r\n    console.log('AnyDesk launch result:', result);\r\n  };\r\n\r\n  return (\r\n    <div className=\"machine-card\">\r\n      <Link to={`/machine/${machine.id}`} className=\"machine-card-link\">\r\n        <div className=\"machine-card-header\">\r\n          <h3 className=\"machine-name\">{machine.name}</h3>\r\n          <span className=\"machine-connection-indicator\">\r\n            {machine.connectionCount > 0 && (\r\n              <span className=\"connection-count\" title={`Connected ${machine.connectionCount} times`}>\r\n                {machine.connectionCount}\r\n              </span>\r\n            )}\r\n          </span>\r\n        </div>\r\n        \r\n        <div className=\"machine-id\">{machine.anydeskId}</div>\r\n        \r\n        {machine.address && (\r\n          <div className=\"machine-address\">{machine.address}</div>\r\n        )}\r\n        \r\n        {machine.tags.length > 0 && (\r\n          <div className=\"machine-tags\">\r\n            {machine.tags.slice(0, 3).map((tag, index) => (\r\n              <span key={index} className=\"machine-tag\">\r\n                {tag}\r\n              </span>\r\n            ))}\r\n            {machine.tags.length > 3 && (\r\n              <span className=\"machine-tag\">+{machine.tags.length - 3}</span>\r\n            )}\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"machine-footer\">\r\n          <span className=\"machine-last-accessed\">\r\n            Last: {formatLastAccessed(machine.lastAccessed)}\r\n          </span>\r\n          <span className=\"machine-password-count\">\r\n            {machine.passwords.length} password{machine.passwords.length !== 1 ? 's' : ''}\r\n          </span>\r\n        </div>\r\n      </Link>\r\n      \r\n      <div className=\"machine-card-actions\">\r\n        <AnydeskLaunchButton\r\n          machineId={machine.id}\r\n          machineName={machine.name}\r\n          anydeskId={machine.anydeskId}\r\n          size=\"sm\"\r\n          variant=\"primary\"\r\n          onLaunchResult={handleLaunchResult}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["anydeskService","launchAnyDesk","machineId","machine","indexedDBService","getMachine","success","method","error","logConnectionAttempt","anydeskUrl","concat","anydeskId","fallbackUrl","this","openAnyDeskApp","console","log","window","open","Error","message","url","Promise","resolve","iframe","document","createElement","style","display","src","timeout","setTimeout","body","removeChild","handleFocus","clearTimeout","removeEventListener","addEventListener","appendChild","location","href","checkAnyDeskAvailability","getAnyDeskDownloadUrl","userAgent","navigator","toLowerCase","includes","formatAnyDeskId","id","replace","isValidAnyDeskId","cleanId","length","test","getLaunchMessage","result","machineName","_ref","size","variant","onLaunchResult","className","isLaunching","setIsLaunching","useState","lastResult","setLastResult","_jsxs","getButtonClass","sizeClass","variantClass","stateClass","resultClass","trim","onClick","async","alert","confirm","errorResult","disabled","title","children","_jsx","LoadingSpinner","getButtonText","MachineCard","Link","to","name","connectionCount","address","tags","slice","map","tag","index","date","dateObj","Date","now","diffInHours","Math","floor","getTime","toLocaleDateString","formatLastAccessed","lastAccessed","passwords","AnydeskLaunchButton","Dashboard","machines","setMachines","loading","setLoading","searchTerm","setSearchTerm","selectedCategories","setSelectedCategories","selectedTags","setSelectedTags","hasPasswordFilter","setHasPasswordFilter","filteredMachines","setFilteredMachines","useAutoBackupOnChange","filterMachines","useCallback","filtered","searchLower","filter","_machine$address","_machine$notes","notes","some","categories","cat","category","useEffect","allMachines","getAllMachines","loadMachines","getAllCategories","Set","forEach","add","Array","from","sort","getAllTags","m","type","placeholder","value","onChange","e","target","prev","c","handleCategoryToggle","t","handleTagToggle","clearAllFilters","viewBox","fill","stroke","strokeWidth","x1","y1","x2","y2","_Fragment","x","y","width","height","rx","ry","cx","cy","r","d"],"sourceRoot":""}