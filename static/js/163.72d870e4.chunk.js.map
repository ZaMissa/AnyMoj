{"version":3,"file":"static/js/163.72d870e4.chunk.js","mappings":"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","sources":["pages/History.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ConnectionHistory } from '../types/machine.types';\r\nimport { indexedDBService } from '../services/indexedDB.service';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\n\r\nconst History: React.FC = () => {\r\n  const [history, setHistory] = useState<ConnectionHistory[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    loadHistory();\r\n  }, []);\r\n\r\n  const loadHistory = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const historyData = await indexedDBService.getConnectionHistory();\r\n      // Sort by timestamp, newest first\r\n      const sortedHistory = historyData.sort((a, b) => \r\n        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\r\n      );\r\n      setHistory(sortedHistory);\r\n    } catch (error) {\r\n      console.error('Failed to load history:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatTimestamp = (date: Date) => {\r\n    const now = new Date();\r\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n    \r\n    if (diffInMinutes < 1) return 'Just now';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\r\n    if (diffInMinutes < 10080) return `${Math.floor(diffInMinutes / 1440)}d ago`;\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  const getActionIcon = (action: ConnectionHistory['action']) => {\r\n    switch (action) {\r\n      case 'launch_success':\r\n        return (\r\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"/>\r\n            <polyline points=\"22,4 12,14.01 9,11.01\"/>\r\n          </svg>\r\n        );\r\n      case 'launch_failure':\r\n        return (\r\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"/>\r\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"/>\r\n          </svg>\r\n        );\r\n      case 'launch_attempt':\r\n        return (\r\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n            <polyline points=\"12,6 12,12 16,14\"/>\r\n          </svg>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getActionColor = (action: ConnectionHistory['action']) => {\r\n    switch (action) {\r\n      case 'launch_success':\r\n        return 'text-success';\r\n      case 'launch_failure':\r\n        return 'text-error';\r\n      case 'launch_attempt':\r\n        return 'text-warning';\r\n      default:\r\n        return 'text-secondary';\r\n    }\r\n  };\r\n\r\n  const getActionText = (action: ConnectionHistory['action']) => {\r\n    switch (action) {\r\n      case 'launch_success':\r\n        return 'Connected successfully';\r\n      case 'launch_failure':\r\n        return 'Connection failed';\r\n      case 'launch_attempt':\r\n        return 'Connection attempted';\r\n      default:\r\n        return 'Unknown action';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"page-loading\">\r\n        <LoadingSpinner size=\"lg\" />\r\n        <p>Loading connection history...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"history-page\">\r\n      <div className=\"page-header\">\r\n        <h1 className=\"page-title\">Connection History</h1>\r\n        <p className=\"page-subtitle\">\r\n          Track all your AnyDesk connection attempts\r\n        </p>\r\n      </div>\r\n\r\n      {history.length === 0 ? (\r\n        <div className=\"empty-state\">\r\n          <div className=\"empty-state-icon\">\r\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\r\n              <path d=\"M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z\"/>\r\n            </svg>\r\n          </div>\r\n          <h3>No connection history yet</h3>\r\n          <p>Start using AnyDesk quick launch to see your connection history here.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"history-list\">\r\n          {history.map((entry) => (\r\n            <div key={entry.id} className=\"history-item\">\r\n              <div className=\"history-icon\">\r\n                <div className={`action-icon ${getActionColor(entry.action)}`}>\r\n                  {getActionIcon(entry.action)}\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"history-content\">\r\n                <div className=\"history-main\">\r\n                  <span className=\"machine-id\">{entry.machineId}</span>\r\n                  <span className={`action-text ${getActionColor(entry.action)}`}>\r\n                    {getActionText(entry.action)}\r\n                  </span>\r\n                </div>\r\n                \r\n                <div className=\"history-meta\">\r\n                  <span className=\"timestamp\">{formatTimestamp(entry.timestamp)}</span>\r\n                  {entry.notes && (\r\n                    <span className=\"notes\">{entry.notes}</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n"],"names":["History","history","setHistory","useState","loading","setLoading","useEffect","loadHistory","async","sortedHistory","indexedDBService","getConnectionHistory","sort","a","b","Date","timestamp","getTime","error","console","formatTimestamp","date","now","diffInMinutes","Math","floor","concat","toLocaleDateString","getActionIcon","action","_jsxs","viewBox","fill","stroke","strokeWidth","children","_jsx","d","points","cx","cy","r","x1","y1","x2","y2","getActionColor","getActionText","className","LoadingSpinner","size","length","map","entry","machineId","notes","id"],"sourceRoot":""}