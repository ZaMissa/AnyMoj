{"version":3,"file":"static/js/652.7b1895d8.chunk.js","mappings":"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","sources":["services/export.service.ts","components/ExportImport.tsx","components/VersionDisplay.tsx","components/GroupManager.tsx","pages/Settings.tsx"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\nimport { AppSettings, BackupData, ExportOptions, ImportResult } from '../types/machine.types';\r\n\r\nclass ExportService {\r\n  /**\r\n   * Export data to JSON format\r\n   */\r\n  async exportData(options: ExportOptions): Promise<Blob> {\r\n    const backupData: BackupData = {\r\n      version: '1.0.0',\r\n      exportDate: new Date(),\r\n      machines: [],\r\n      settings: {} as AppSettings,\r\n      history: []\r\n    };\r\n\r\n    // Get data based on export options\r\n    if (options.includeMachines) {\r\n      const { indexedDBService } = await import('./indexedDB.service');\r\n      if (options.selectedMachineIds && options.selectedMachineIds.length > 0) {\r\n        // Export selected machines only\r\n        for (const machineId of options.selectedMachineIds) {\r\n          const machine = await indexedDBService.getMachine(machineId);\r\n          if (machine) {\r\n            backupData.machines.push(machine);\r\n          }\r\n        }\r\n      } else {\r\n        // Export all machines\r\n        backupData.machines = await indexedDBService.getAllMachines();\r\n      }\r\n    }\r\n\r\n    if (options.includeSettings) {\r\n      const { indexedDBService } = await import('./indexedDB.service');\r\n      backupData.settings = await indexedDBService.getSettings();\r\n    }\r\n\r\n    if (options.includeHistory) {\r\n      const { indexedDBService } = await import('./indexedDB.service');\r\n      backupData.history = await indexedDBService.getConnectionHistory();\r\n    }\r\n\r\n    // Convert to JSON string\r\n    let jsonString = JSON.stringify(backupData, null, 2);\r\n\r\n    // Encrypt if requested\r\n    if (options.encrypt && options.password) {\r\n      const encrypted = CryptoJS.AES.encrypt(jsonString, options.password).toString();\r\n      const encryptedWrapper = {\r\n        encrypted: true,\r\n        data: encrypted,\r\n        version: backupData.version,\r\n        exportDate: backupData.exportDate\r\n      };\r\n      jsonString = JSON.stringify(encryptedWrapper, null, 2);\r\n      console.log('Encrypted export structure:', encryptedWrapper);\r\n    }\r\n\r\n    // Create blob with appropriate MIME type\r\n    const mimeType = options.encrypt ? 'application/json' : 'application/json';\r\n    return new Blob([jsonString], { type: mimeType });\r\n  }\r\n\r\n  /**\r\n   * Import data from JSON format\r\n   */\r\n  async importData(file: File, password?: string): Promise<ImportResult> {\r\n    const result: ImportResult = {\r\n      success: false,\r\n      importedMachines: 0,\r\n      importedSettings: false,\r\n      importedHistory: 0,\r\n      errors: [],\r\n      warnings: []\r\n    };\r\n\r\n    try {\r\n      // Read file content\r\n      const fileContent = await this.readFileAsText(file);\r\n      let backupData: BackupData;\r\n\r\n      try {\r\n        // Try to parse as JSON\r\n        const parsedData = JSON.parse(fileContent);\r\n\r\n        // Check if data is encrypted\r\n        if (parsedData.encrypted) {\r\n          if (!password) {\r\n            result.errors.push('File is encrypted but no password provided');\r\n            return result;\r\n          }\r\n\r\n          try {\r\n            // Decrypt the data\r\n            const decrypted = CryptoJS.AES.decrypt(parsedData.data, password).toString(CryptoJS.enc.Utf8);\r\n            if (!decrypted) {\r\n              result.errors.push('Invalid password or corrupted encrypted data');\r\n              return result;\r\n            }\r\n            \r\n            // Parse the decrypted JSON\r\n            try {\r\n              backupData = JSON.parse(decrypted);\r\n              console.log('Decrypted backup data structure:', backupData);\r\n            } catch (parseError) {\r\n              result.errors.push('Failed to parse decrypted data. File may be corrupted.');\r\n              console.error('JSON parse error:', parseError);\r\n              console.error('Decrypted string:', decrypted);\r\n              return result;\r\n            }\r\n          } catch (decryptError) {\r\n            result.errors.push('Failed to decrypt data. Check password.');\r\n            console.error('Decryption error:', decryptError);\r\n            return result;\r\n          }\r\n        } else {\r\n          backupData = parsedData;\r\n        }\r\n\r\n        // Validate backup data structure\r\n        if (!this.validateBackupData(backupData)) {\r\n          result.errors.push('Invalid backup file format. Expected: version, exportDate, machines, settings, history');\r\n          console.error('Validation failed for data:', backupData);\r\n          return result;\r\n        }\r\n\r\n        // Import data\r\n        await this.importBackupData(backupData, result);\r\n\r\n        result.success = true;\r\n      } catch (parseError) {\r\n        result.errors.push('Invalid JSON format in backup file');\r\n        return result;\r\n      }\r\n    } catch (fileError) {\r\n      result.errors.push(`Failed to read file: ${fileError}`);\r\n      return result;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate filename for export\r\n   */\r\n  generateFilename(options: ExportOptions): string {\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\r\n    const scope = options.selectedMachineIds ? 'selected' : 'all';\r\n    const encryption = options.encrypt ? 'encrypted' : 'plain';\r\n    return `machine-backup-${scope}-${encryption}-${timestamp}.json`;\r\n  }\r\n\r\n  /**\r\n   * Download blob as file\r\n   */\r\n  downloadBlob(blob: Blob, filename: string): void {\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  /**\r\n   * Read file as text\r\n   */\r\n  private readFileAsText(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target?.result as string);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate backup data structure\r\n   */\r\n  private validateBackupData(data: any): data is BackupData {\r\n    try {\r\n      // Check basic structure\r\n      if (!data || typeof data !== 'object') {\r\n        console.error('Validation failed: data is not an object');\r\n        return false;\r\n      }\r\n\r\n      // Check required fields\r\n      if (typeof data.version !== 'string') {\r\n        console.error('Validation failed: version is not a string', data.version);\r\n        return false;\r\n      }\r\n\r\n      if (!data.exportDate) {\r\n        console.error('Validation failed: exportDate is missing');\r\n        return false;\r\n      }\r\n\r\n      if (!Array.isArray(data.machines)) {\r\n        console.error('Validation failed: machines is not an array', data.machines);\r\n        return false;\r\n      }\r\n\r\n      if (!Array.isArray(data.history)) {\r\n        console.error('Validation failed: history is not an array', data.history);\r\n        return false;\r\n      }\r\n\r\n      if (!data.settings || typeof data.settings !== 'object') {\r\n        console.error('Validation failed: settings is not an object', data.settings);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Validation error:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Import backup data into IndexedDB\r\n   */\r\n  private async importBackupData(backupData: BackupData, result: ImportResult): Promise<void> {\r\n    const { indexedDBService } = await import('./indexedDB.service');\r\n\r\n    try {\r\n      // Import machines\r\n      for (const machine of backupData.machines) {\r\n        try {\r\n          const existingMachine = await indexedDBService.getMachine(machine.id);\r\n          \r\n          if (existingMachine) {\r\n            // Machine exists - update it\r\n            await indexedDBService.updateMachine(machine);\r\n            result.warnings.push(`Updated existing machine: ${machine.name}`);\r\n          } else {\r\n            // New machine - add it\r\n            await indexedDBService.addMachine(machine);\r\n            result.importedMachines++;\r\n          }\r\n        } catch (machineError) {\r\n          result.errors.push(`Failed to import machine ${machine.name}: ${machineError}`);\r\n        }\r\n      }\r\n\r\n      // Import history\r\n      for (const historyEntry of backupData.history) {\r\n        try {\r\n          await indexedDBService.addConnectionHistory(historyEntry);\r\n          result.importedHistory++;\r\n        } catch (historyError) {\r\n          result.warnings.push(`Failed to import history entry: ${historyError}`);\r\n        }\r\n      }\r\n\r\n      // Import settings (merge strategy)\r\n      try {\r\n        const currentSettings = await indexedDBService.getSettings();\r\n        const mergedSettings = this.mergeSettings(currentSettings, backupData.settings);\r\n        await indexedDBService.updateSettings(mergedSettings);\r\n        result.importedSettings = true;\r\n      } catch (settingsError) {\r\n        result.warnings.push(`Failed to import settings: ${settingsError}`);\r\n      }\r\n\r\n    } catch (error) {\r\n      result.errors.push(`Import failed: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merge settings with existing settings\r\n   */\r\n  private mergeSettings(current: AppSettings, imported: AppSettings): AppSettings {\r\n    return {\r\n      ...current,\r\n      ...imported,\r\n      id: current.id, // Keep current ID\r\n      // Preserve some current settings while importing others\r\n      darkMode: imported.darkMode !== undefined ? imported.darkMode : current.darkMode,\r\n      autoBackup: imported.autoBackup !== undefined ? imported.autoBackup : current.autoBackup,\r\n      defaultEncryption: imported.defaultEncryption !== undefined ? imported.defaultEncryption : current.defaultEncryption,\r\n      // Merge categories and custom field definitions\r\n      categories: Array.from(new Set([...current.categories, ...imported.categories])),\r\n      customFieldDefinitions: this.mergeCustomFieldDefinitions(current.customFieldDefinitions, imported.customFieldDefinitions)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Merge custom field definitions\r\n   */\r\n  private mergeCustomFieldDefinitions(current: any[], imported: any[]): any[] {\r\n    const merged = [...current];\r\n    \r\n    for (const importedField of imported) {\r\n      const existingIndex = merged.findIndex(field => field.id === importedField.id);\r\n      if (existingIndex >= 0) {\r\n        // Update existing field\r\n        merged[existingIndex] = importedField;\r\n      } else {\r\n        // Add new field\r\n        merged.push(importedField);\r\n      }\r\n    }\r\n    \r\n    return merged;\r\n  }\r\n\r\n  /**\r\n   * Detect if file is encrypted\r\n   */\r\n  async detectEncryption(file: File): Promise<boolean> {\r\n    try {\r\n      const content = await this.readFileAsText(file);\r\n      const parsed = JSON.parse(content);\r\n      return parsed.encrypted === true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get export summary for UI display\r\n   */\r\n  async getExportSummary(options: ExportOptions): Promise<{\r\n    machineCount: number;\r\n    hasSettings: boolean;\r\n    hasHistory: boolean;\r\n    estimatedSize: string;\r\n  }> {\r\n    const { indexedDBService } = await import('./indexedDB.service');\r\n    \r\n    let machineCount = 0;\r\n    if (options.includeMachines) {\r\n      if (options.selectedMachineIds && options.selectedMachineIds.length > 0) {\r\n        machineCount = options.selectedMachineIds.length;\r\n      } else {\r\n        const allMachines = await indexedDBService.getAllMachines();\r\n        machineCount = allMachines.length;\r\n      }\r\n    }\r\n\r\n    const hasSettings = options.includeSettings;\r\n    \r\n    let hasHistory = false;\r\n    if (options.includeHistory) {\r\n      const history = await indexedDBService.getConnectionHistory();\r\n      hasHistory = history.length > 0;\r\n    }\r\n\r\n    // Estimate file size (rough calculation)\r\n    const estimatedSizeBytes = machineCount * 500 + (hasSettings ? 1000 : 0) + (hasHistory ? 200 : 0);\r\n    const estimatedSize = this.formatFileSize(estimatedSizeBytes);\r\n\r\n    return {\r\n      machineCount,\r\n      hasSettings,\r\n      hasHistory,\r\n      estimatedSize\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format file size for display\r\n   */\r\n  private formatFileSize(bytes: number): string {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n\r\n  /**\r\n   * Test export/import cycle for debugging\r\n   */\r\n  async testExportImportCycle(password: string = 'test123'): Promise<boolean> {\r\n    try {\r\n      console.log('Testing export/import cycle...');\r\n\r\n      // Test export\r\n      const exportBlob = await this.exportData({\r\n        includeMachines: true,\r\n        includeSettings: true,\r\n        includeHistory: true,\r\n        selectedMachineIds: [],\r\n        encrypt: true,\r\n        password\r\n      });\r\n\r\n      // Create a test file from the blob\r\n      const testFile = new File([exportBlob], 'test-backup.json', { type: 'application/json' });\r\n\r\n      // Test import\r\n      const importResult = await this.importData(testFile, password);\r\n      \r\n      console.log('Test result:', importResult);\r\n      return importResult.success;\r\n    } catch (error) {\r\n      console.error('Test failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const exportService = new ExportService();\r\n","import React, { useState, useRef } from 'react';\r\nimport { Machine } from '../types/machine.types';\r\nimport { exportService } from '../services/export.service';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport './ExportImport.css';\r\n\r\ninterface ExportImportProps {\r\n  machines: Machine[];\r\n  onImportComplete?: (result: any) => void;\r\n}\r\n\r\nconst ExportImport: React.FC<ExportImportProps> = ({ machines, onImportComplete }) => {\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [isImporting, setIsImporting] = useState(false);\r\n  const [exportOptions, setExportOptions] = useState({\r\n    includeMachines: true,\r\n    includeSettings: true,\r\n    includeHistory: true,\r\n    selectedMachineIds: [] as string[],\r\n    encrypt: false,\r\n    password: ''\r\n  });\r\n  const [importResult, setImportResult] = useState<any>(null);\r\n  const [showPasswordPrompt, setShowPasswordPrompt] = useState(false);\r\n  const [pendingFile, setPendingFile] = useState<File | null>(null);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleExport = async () => {\r\n    if (exportOptions.encrypt && !exportOptions.password.trim()) {\r\n      alert('Please enter a password for encryption');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsExporting(true);\r\n      \r\n      const blob = await exportService.exportData(exportOptions);\r\n      const filename = exportService.generateFilename(exportOptions);\r\n      \r\n      exportService.downloadBlob(blob, filename);\r\n      \r\n      alert(`✅ Export completed! File: ${filename}`);\r\n    } catch (error) {\r\n      console.error('Export failed:', error);\r\n      alert(`❌ Export failed: ${error}`);\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  };\r\n\r\n  const handleImport = async (file: File, password?: string) => {\r\n    try {\r\n      setIsImporting(true);\r\n      setImportResult(null);\r\n      \r\n      const result = await exportService.importData(file, password);\r\n      setImportResult(result);\r\n      \r\n      if (result.success) {\r\n        alert(`✅ Import completed!\\n\\nImported: ${result.importedMachines} machines, ${result.importedHistory} history entries${result.importedSettings ? ', settings' : ''}`);\r\n        if (onImportComplete) {\r\n          onImportComplete(result);\r\n        }\r\n      } else {\r\n        alert(`❌ Import failed:\\n${result.errors.join('\\n')}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Import failed:', error);\r\n      alert(`❌ Import failed: ${error}`);\r\n    } finally {\r\n      setIsImporting(false);\r\n    }\r\n  };\r\n\r\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    // Reset file input\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n\r\n    try {\r\n      const isEncrypted = await exportService.detectEncryption(file);\r\n      \r\n      if (isEncrypted) {\r\n        setPendingFile(file);\r\n        setShowPasswordPrompt(true);\r\n      } else {\r\n        await handleImport(file);\r\n      }\r\n    } catch (error) {\r\n      console.error('File processing error:', error);\r\n      alert(`❌ Failed to process file: ${error}`);\r\n    }\r\n  };\r\n\r\n  const handlePasswordSubmit = async (password: string) => {\r\n    if (pendingFile) {\r\n      setShowPasswordPrompt(false);\r\n      await handleImport(pendingFile, password);\r\n      setPendingFile(null);\r\n    }\r\n  };\r\n\r\n  const toggleMachineSelection = (machineId: string) => {\r\n    setExportOptions(prev => ({\r\n      ...prev,\r\n      selectedMachineIds: prev.selectedMachineIds.includes(machineId)\r\n        ? prev.selectedMachineIds.filter(id => id !== machineId)\r\n        : [...prev.selectedMachineIds, machineId]\r\n    }));\r\n  };\r\n\r\n  const selectAllMachines = () => {\r\n    setExportOptions(prev => ({\r\n      ...prev,\r\n      selectedMachineIds: machines.map(m => m.id)\r\n    }));\r\n  };\r\n\r\n  const clearMachineSelection = () => {\r\n    setExportOptions(prev => ({\r\n      ...prev,\r\n      selectedMachineIds: []\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"export-import\">\r\n      <h3>Export & Import Data</h3>\r\n      \r\n      {/* Export Section */}\r\n      <div className=\"export-section\">\r\n        <h4>Export Data</h4>\r\n        \r\n        <div className=\"export-options\">\r\n          <div className=\"option-group\">\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={exportOptions.includeMachines}\r\n                onChange={(e) => setExportOptions(prev => ({ ...prev, includeMachines: e.target.checked }))}\r\n              />\r\n              Include Machines\r\n            </label>\r\n            \r\n            {exportOptions.includeMachines && (\r\n              <div className=\"machine-selection\">\r\n                <div className=\"selection-controls\">\r\n                  <button type=\"button\" onClick={selectAllMachines} className=\"btn btn-sm\">\r\n                    Select All\r\n                  </button>\r\n                  <button type=\"button\" onClick={clearMachineSelection} className=\"btn btn-sm\">\r\n                    Clear All\r\n                  </button>\r\n                </div>\r\n                <div className=\"machine-list\">\r\n                  {machines.map(machine => (\r\n                    <label key={machine.id} className=\"checkbox-label\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={exportOptions.selectedMachineIds.includes(machine.id)}\r\n                        onChange={() => toggleMachineSelection(machine.id)}\r\n                      />\r\n                      {machine.name} ({machine.anydeskId})\r\n                    </label>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <label className=\"checkbox-label\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={exportOptions.includeSettings}\r\n              onChange={(e) => setExportOptions(prev => ({ ...prev, includeSettings: e.target.checked }))}\r\n            />\r\n            Include Settings\r\n          </label>\r\n\r\n          <label className=\"checkbox-label\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={exportOptions.includeHistory}\r\n              onChange={(e) => setExportOptions(prev => ({ ...prev, includeHistory: e.target.checked }))}\r\n            />\r\n            Include Connection History\r\n          </label>\r\n        </div>\r\n\r\n        <div className=\"encryption-section\">\r\n          <label className=\"checkbox-label\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={exportOptions.encrypt}\r\n              onChange={(e) => setExportOptions(prev => ({ ...prev, encrypt: e.target.checked }))}\r\n            />\r\n            Encrypt Export\r\n          </label>\r\n          \r\n          {exportOptions.encrypt && (\r\n            <div className=\"password-input\">\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Enter encryption password\"\r\n                value={exportOptions.password}\r\n                autoComplete=\"new-password\"\r\n                onChange={(e) => setExportOptions(prev => ({ ...prev, password: e.target.value }))}\r\n                className=\"form-input\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <button\r\n          onClick={handleExport}\r\n          disabled={isExporting}\r\n          className=\"btn btn-primary\"\r\n        >\r\n          {isExporting ? (\r\n            <>\r\n              <LoadingSpinner size=\"sm\" />\r\n              Exporting...\r\n            </>\r\n          ) : (\r\n            'Export Data'\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Import Section */}\r\n      <div className=\"import-section\">\r\n        <h4>Import Data</h4>\r\n        \r\n        <div className=\"import-info\">\r\n          <p>Import data from a previously exported backup file. The import will merge with existing data.</p>\r\n        </div>\r\n\r\n        <div className=\"file-input-container\">\r\n          <input\r\n            ref={fileInputRef}\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={handleFileSelect}\r\n            className=\"file-input\"\r\n            id=\"import-file\"\r\n          />\r\n          <label htmlFor=\"import-file\" className=\"file-input-label\">\r\n            {isImporting ? (\r\n              <>\r\n                <LoadingSpinner size=\"sm\" />\r\n                Importing...\r\n              </>\r\n            ) : (\r\n              'Choose Backup File'\r\n            )}\r\n          </label>\r\n        </div>\r\n\r\n        {importResult && (\r\n          <div className={`import-result ${importResult.success ? 'success' : 'error'}`}>\r\n            <h5>Import Result</h5>\r\n            <p>✅ Imported: {importResult.importedMachines} machines, {importResult.importedHistory} history entries</p>\r\n            {importResult.importedSettings && <p>✅ Settings imported</p>}\r\n            {importResult.errors.length > 0 && (\r\n              <div className=\"errors\">\r\n                <h6>Errors:</h6>\r\n                <ul>\r\n                  {importResult.errors.map((error: string, index: number) => (\r\n                    <li key={index}>{error}</li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n            {importResult.warnings.length > 0 && (\r\n              <div className=\"warnings\">\r\n                <h6>Warnings:</h6>\r\n                <ul>\r\n                  {importResult.warnings.map((warning: string, index: number) => (\r\n                    <li key={index}>{warning}</li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Password Prompt Modal */}\r\n      {showPasswordPrompt && (\r\n        <div className=\"password-modal-overlay\">\r\n          <div className=\"password-modal\">\r\n            <h4>Encrypted File</h4>\r\n            <p>This backup file is encrypted. Please enter the password:</p>\r\n            <PasswordPrompt\r\n              onSubmit={handlePasswordSubmit}\r\n              onCancel={() => {\r\n                setShowPasswordPrompt(false);\r\n                setPendingFile(null);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Password prompt component\r\nconst PasswordPrompt: React.FC<{\r\n  onSubmit: (password: string) => void;\r\n  onCancel: () => void;\r\n}> = ({ onSubmit, onCancel }) => {\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (password.trim()) {\r\n      onSubmit(password.trim());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"password-form\">\r\n      <input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        autoComplete=\"current-password\"\r\n        placeholder=\"Enter password\"\r\n        className=\"form-input\"\r\n        autoFocus\r\n      />\r\n      <div className=\"form-actions\">\r\n        <button type=\"button\" onClick={onCancel} className=\"btn btn-secondary\">\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn-primary\" disabled={!password.trim()}>\r\n          Import\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExportImport;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { versionService, VersionInfo } from '../services/version.service';\r\nimport './VersionDisplay.css';\r\n\r\ninterface VersionDisplayProps {\r\n  showUpdateButton?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst VersionDisplay: React.FC<VersionDisplayProps> = ({ \r\n  showUpdateButton = true, \r\n  className = '' \r\n}) => {\r\n  const [versionInfo, setVersionInfo] = useState<VersionInfo | null>(null);\r\n  const [isChecking, setIsChecking] = useState(false);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadVersionInfo();\r\n  }, []);\r\n\r\n  const loadVersionInfo = () => {\r\n    const info = versionService.getStoredVersionInfo();\r\n    setVersionInfo(info);\r\n  };\r\n\r\n  const handleCheckForUpdates = async () => {\r\n    setIsChecking(true);\r\n    try {\r\n      const result = await versionService.forceUpdateCheck();\r\n      loadVersionInfo(); // Reload to get updated info\r\n    } catch (error) {\r\n      console.error('Failed to check for updates:', error);\r\n    } finally {\r\n      setIsChecking(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    if (versionInfo?.updateUrl) {\r\n      window.open(versionInfo.updateUrl, '_blank');\r\n    } else {\r\n      // Fallback to page reload\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  if (!versionInfo) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={`version-display ${className}`}>\r\n      <div className=\"version-info\">\r\n        <span className=\"version-text\">\r\n          {versionService.getFormattedVersion()}\r\n        </span>\r\n        \r\n        {versionInfo.isUpdateAvailable && (\r\n          <span className=\"update-badge\">\r\n            Update Available\r\n          </span>\r\n        )}\r\n        \r\n        <button\r\n          className=\"version-toggle-btn\"\r\n          onClick={() => setShowDetails(!showDetails)}\r\n          title={showDetails ? 'Hide details' : 'Show details'}\r\n        >\r\n          {showDetails ? '▼' : '▶'}\r\n        </button>\r\n      </div>\r\n\r\n      {showDetails && (\r\n        <div className=\"version-details\">\r\n          <div className=\"version-detail-item\">\r\n            <span className=\"detail-label\">Current:</span>\r\n            <span className=\"detail-value\">v{versionInfo.current}</span>\r\n          </div>\r\n          \r\n          <div className=\"version-detail-item\">\r\n            <span className=\"detail-label\">Latest:</span>\r\n            <span className=\"detail-value\">v{versionInfo.latest}</span>\r\n          </div>\r\n          \r\n          {versionInfo.lastChecked && (\r\n            <div className=\"version-detail-item\">\r\n              <span className=\"detail-label\">Last checked:</span>\r\n              <span className=\"detail-value\">\r\n                {versionInfo.lastChecked.toLocaleDateString()} {versionInfo.lastChecked.toLocaleTimeString()}\r\n              </span>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"version-actions\">\r\n            <button\r\n              className=\"btn btn-sm btn-secondary\"\r\n              onClick={handleCheckForUpdates}\r\n              disabled={isChecking}\r\n            >\r\n              {isChecking ? 'Checking...' : 'Check for Updates'}\r\n            </button>\r\n            \r\n            {versionInfo.isUpdateAvailable && showUpdateButton && (\r\n              <button\r\n                className=\"btn btn-sm btn-primary\"\r\n                onClick={handleUpdate}\r\n              >\r\n                Update Now\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VersionDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Group, Machine } from '../types/machine.types';\r\nimport { indexedDBService } from '../services/indexedDB.service';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport './GroupManager.css';\r\n\r\ninterface GroupManagerProps {\r\n  machines: Machine[];\r\n  onGroupChange: () => void;\r\n}\r\n\r\nconst GroupManager: React.FC<GroupManagerProps> = ({ machines, onGroupChange }) => {\r\n  const [groups, setGroups] = useState<Group[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showCreateForm, setShowCreateForm] = useState(false);\r\n  const [editingGroup, setEditingGroup] = useState<Group | null>(null);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    color: '#3b82f6'\r\n  });\r\n\r\n  const predefinedColors = [\r\n    '#3b82f6', '#ef4444', '#10b981', '#f59e0b',\r\n    '#8b5cf6', '#06b6d4', '#84cc16', '#f97316',\r\n    '#ec4899', '#6366f1', '#14b8a6', '#eab308'\r\n  ];\r\n\r\n  useEffect(() => {\r\n    loadGroups();\r\n  }, []);\r\n\r\n  const loadGroups = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const settings = await indexedDBService.getSettings();\r\n      const groupsWithCounts = (settings?.groups || []).map(group => ({\r\n        ...group,\r\n        machineCount: machines.filter(m => m.groupId === group.id).length\r\n      }));\r\n      setGroups(groupsWithCounts);\r\n    } catch (error) {\r\n      console.error('Failed to load groups:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!formData.name.trim()) return;\r\n\r\n    try {\r\n      const settings = await indexedDBService.getSettings();\r\n      const newGroup: Group = {\r\n        id: crypto.randomUUID(),\r\n        name: formData.name.trim(),\r\n        description: formData.description.trim(),\r\n        color: formData.color,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        machineCount: 0\r\n      };\r\n\r\n      const updatedGroups = editingGroup\r\n        ? groups.map(g => g.id === editingGroup.id ? { ...newGroup, id: editingGroup.id, createdAt: editingGroup.createdAt } : g)\r\n        : [...groups, newGroup];\r\n\r\n      await indexedDBService.updateSettings({\r\n        ...settings,\r\n        groups: updatedGroups\r\n      });\r\n\r\n      setGroups(updatedGroups);\r\n      setShowCreateForm(false);\r\n      setEditingGroup(null);\r\n      setFormData({ name: '', description: '', color: '#3b82f6' });\r\n      onGroupChange();\r\n    } catch (error) {\r\n      console.error('Failed to save group:', error);\r\n      alert('Failed to save group. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleEdit = (group: Group) => {\r\n    setEditingGroup(group);\r\n    setFormData({\r\n      name: group.name,\r\n      description: group.description || '',\r\n      color: group.color\r\n    });\r\n    setShowCreateForm(true);\r\n  };\r\n\r\n  const handleDelete = async (groupId: string) => {\r\n    if (!window.confirm('Are you sure you want to delete this group? Machines in this group will be ungrouped.')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Remove group from all machines\r\n      const machinesToUpdate = machines.filter(m => m.groupId === groupId);\r\n      for (const machine of machinesToUpdate) {\r\n        await indexedDBService.updateMachine({\r\n          ...machine,\r\n          groupId: undefined\r\n        });\r\n      }\r\n\r\n      // Remove group from settings\r\n      const settings = await indexedDBService.getSettings();\r\n      const updatedGroups = groups.filter(g => g.id !== groupId);\r\n      await indexedDBService.updateSettings({\r\n        ...settings,\r\n        groups: updatedGroups\r\n      });\r\n\r\n      setGroups(updatedGroups);\r\n      onGroupChange();\r\n    } catch (error) {\r\n      console.error('Failed to delete group:', error);\r\n      alert('Failed to delete group. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShowCreateForm(false);\r\n    setEditingGroup(null);\r\n    setFormData({ name: '', description: '', color: '#3b82f6' });\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"group-manager-loading\">\r\n        <LoadingSpinner size=\"md\" />\r\n        <p>Loading groups...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"group-manager\">\r\n      <div className=\"group-manager-header\">\r\n        <h3>Machine Groups</h3>\r\n        <button\r\n          onClick={() => setShowCreateForm(true)}\r\n          className=\"btn btn-primary btn-sm\"\r\n        >\r\n          + Add Group\r\n        </button>\r\n      </div>\r\n\r\n      {showCreateForm && (\r\n        <div className=\"group-form-overlay\">\r\n          <div className=\"group-form\">\r\n            <h4>{editingGroup ? 'Edit Group' : 'Create New Group'}</h4>\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"group-name\">Group Name *</label>\r\n                <input\r\n                  id=\"group-name\"\r\n                  type=\"text\"\r\n                  value={formData.name}\r\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n                  placeholder=\"Enter group name\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"group-description\">Description</label>\r\n                <textarea\r\n                  id=\"group-description\"\r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                  placeholder=\"Enter group description (optional)\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Color</label>\r\n                <div className=\"color-picker\">\r\n                  {predefinedColors.map(color => (\r\n                    <button\r\n                      key={color}\r\n                      type=\"button\"\r\n                      className={`color-option ${formData.color === color ? 'selected' : ''}`}\r\n                      style={{ backgroundColor: color }}\r\n                      onClick={() => setFormData({ ...formData, color })}\r\n                      title={color}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-actions\">\r\n                <button type=\"button\" onClick={handleCancel} className=\"btn btn-secondary\">\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  {editingGroup ? 'Update Group' : 'Create Group'}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"groups-list\">\r\n        {groups.length === 0 ? (\r\n          <div className=\"no-groups\">\r\n            <p>No groups created yet. Create your first group to organize your machines.</p>\r\n          </div>\r\n        ) : (\r\n          groups.map(group => (\r\n            <div key={group.id} className=\"group-item\">\r\n              <div className=\"group-info\">\r\n                <div \r\n                  className=\"group-color-indicator\" \r\n                  style={{ backgroundColor: group.color }}\r\n                />\r\n                <div className=\"group-details\">\r\n                  <h4>{group.name}</h4>\r\n                  {group.description && <p>{group.description}</p>}\r\n                  <span className=\"machine-count\">\r\n                    {group.machineCount} machine{group.machineCount !== 1 ? 's' : ''}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"group-actions\">\r\n                <button\r\n                  onClick={() => handleEdit(group)}\r\n                  className=\"btn btn-sm btn-secondary\"\r\n                >\r\n                  Edit\r\n                </button>\r\n                <button\r\n                  onClick={() => handleDelete(group.id)}\r\n                  className=\"btn btn-sm btn-error\"\r\n                >\r\n                  Delete\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupManager;\r\n","import React, { useState, useEffect } from 'react';\nimport { AppSettings, Machine } from '../types/machine.types';\nimport { indexedDBService } from '../services/indexedDB.service';\nimport { backupService } from '../services/backup.service';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport ExportImport from '../components/ExportImport';\nimport VersionDisplay from '../components/VersionDisplay';\nimport GroupManager from '../components/GroupManager';\nimport './Settings.css';\n\nconst Settings: React.FC = () => {\n  const [settings, setSettings] = useState<AppSettings | null>(null);\n  const [machines, setMachines] = useState<Machine[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    loadSettings();\n    loadMachines();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      setLoading(true);\n      const settingsData = await indexedDBService.getSettings();\n      setSettings(settingsData);\n      \n      // Apply dark mode on load\n      if (settingsData?.darkMode) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadMachines = async () => {\n    try {\n      const allMachines = await indexedDBService.getAllMachines();\n      setMachines(allMachines);\n    } catch (error) {\n      console.error('Failed to load machines:', error);\n    }\n  };\n\n  const handleGroupChange = () => {\n    // Reload machines to reflect group changes\n    loadMachines();\n  };\n\n  const handleSettingChange = async (field: keyof AppSettings, value: any) => {\n    if (settings) {\n      const newSettings = { ...settings, [field]: value };\n      setSettings(newSettings);\n      \n      // Apply dark mode immediately for better UX\n      if (field === 'darkMode') {\n        if (value) {\n          document.documentElement.classList.add('dark');\n        } else {\n          document.documentElement.classList.remove('dark');\n        }\n        \n        // Auto-save dark mode setting immediately\n        try {\n          await indexedDBService.updateSettings(newSettings);\n        } catch (error) {\n          console.error('Failed to save dark mode setting:', error);\n        }\n      }\n    }\n  };\n\n  const saveSettings = async () => {\n    if (!settings) return;\n\n    try {\n      setSaving(true);\n      await indexedDBService.updateSettings(settings);\n      \n      // Apply dark mode class to document\n      if (settings.darkMode) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      alert('Failed to save settings. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n\n  const clearAllData = async () => {\n    // Create a custom confirmation dialog with backup checkbox\n    const confirmed = await showBackupConfirmationDialog();\n    if (!confirmed) {\n      return;\n    }\n\n    try {\n      // Clear backup first to prevent auto-restore\n      await backupService.clearBackup();\n      \n      // Clear all data from IndexedDB\n      await indexedDBService.clearAllData();\n      \n      // Set a flag to prevent auto-restore on next load\n      localStorage.setItem('skipAutoRestore', 'true');\n      \n      // Set a flag to show theme chooser after reload\n      localStorage.setItem('showThemeChooser', 'true');\n      \n      alert('All data has been cleared. The app will reload and show theme selection.');\n      window.location.reload();\n    } catch (error) {\n      console.error('Failed to clear data:', error);\n      alert('Failed to clear data. Please try again.');\n    }\n  };\n\n  const showBackupConfirmationDialog = (): Promise<boolean> => {\n    return new Promise((resolve) => {\n      // Create modal overlay\n      const overlay = document.createElement('div');\n      overlay.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 10000;\n      `;\n\n      // Create modal content\n      const modal = document.createElement('div');\n      modal.style.cssText = `\n        background: white;\n        padding: 24px;\n        border-radius: 8px;\n        max-width: 400px;\n        width: 90%;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      `;\n\n      modal.innerHTML = `\n        <h3 style=\"margin: 0 0 16px 0; color: #d32f2f; font-size: 18px;\">⚠️ Clear All Data</h3>\n        <p style=\"margin: 0 0 16px 0; color: #333; line-height: 1.5;\">\n          This will permanently delete ALL your machines, connection history, and settings. \n          <strong>This action cannot be undone!</strong>\n        </p>\n        <p style=\"margin: 0 0 16px 0; color: #666; font-size: 14px;\">\n          Before proceeding, please ensure you have exported your data as a backup.\n        </p>\n        <label style=\"display: flex; align-items: center; margin: 16px 0; cursor: pointer;\">\n          <input type=\"checkbox\" id=\"backup-confirmation\" style=\"margin-right: 8px;\">\n          <span style=\"color: #333; font-weight: 500;\">\n            I confirm that I have made a backup of my data and understand this action is irreversible\n          </span>\n        </label>\n        <div style=\"display: flex; gap: 12px; justify-content: flex-end; margin-top: 24px;\">\n          <button id=\"cancel-btn\" style=\"\n            padding: 8px 16px;\n            border: 1px solid #ccc;\n            background: white;\n            border-radius: 4px;\n            cursor: pointer;\n            color: #333;\n          \">Cancel</button>\n          <button id=\"confirm-btn\" style=\"\n            padding: 8px 16px;\n            border: none;\n            background: #d32f2f;\n            color: white;\n            border-radius: 4px;\n            cursor: pointer;\n            opacity: 0.5;\n          \" disabled>Clear All Data</button>\n        </div>\n      `;\n\n      overlay.appendChild(modal);\n      document.body.appendChild(overlay);\n\n      const checkbox = modal.querySelector('#backup-confirmation') as HTMLInputElement;\n      const cancelBtn = modal.querySelector('#cancel-btn') as HTMLButtonElement;\n      const confirmBtn = modal.querySelector('#confirm-btn') as HTMLButtonElement;\n\n      // Enable/disable confirm button based on checkbox\n      const updateConfirmButton = () => {\n        if (checkbox.checked) {\n          confirmBtn.disabled = false;\n          confirmBtn.style.opacity = '1';\n        } else {\n          confirmBtn.disabled = true;\n          confirmBtn.style.opacity = '0.5';\n        }\n      };\n\n      checkbox.addEventListener('change', updateConfirmButton);\n\n      // Event handlers\n      cancelBtn.addEventListener('click', () => {\n        document.body.removeChild(overlay);\n        resolve(false);\n      });\n\n      confirmBtn.addEventListener('click', () => {\n        if (checkbox.checked) {\n          document.body.removeChild(overlay);\n          resolve(true);\n        }\n      });\n\n      // Close on overlay click\n      overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n          document.body.removeChild(overlay);\n          resolve(false);\n        }\n      });\n\n      // Close on Escape key\n      const handleEscape = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          document.body.removeChild(overlay);\n          document.removeEventListener('keydown', handleEscape);\n          resolve(false);\n        }\n      };\n      document.addEventListener('keydown', handleEscape);\n    });\n  };\n\n  const handleImportComplete = async (result: any) => {\n    // Reload data after successful import\n    await loadSettings();\n    await loadMachines();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"page-loading\">\n        <LoadingSpinner size=\"lg\" />\n        <p>Loading settings...</p>\n      </div>\n    );\n  }\n\n  if (!settings) {\n    return (\n      <div className=\"page-error\">\n        <h2>Failed to load settings</h2>\n        <button onClick={loadSettings} className=\"btn btn-primary\">\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-page\">\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">Settings</h1>\n        <p className=\"page-subtitle\">\n          Manage your app preferences and data\n        </p>\n      </div>\n\n      <div className=\"settings-sections\">\n        {/* Appearance Settings */}\n        <div className=\"settings-section\">\n          <h3>Appearance</h3>\n          \n          <div className=\"setting-item\">\n            <div className=\"setting-info\">\n              <label className=\"setting-label\">Dark Mode</label>\n              <p className=\"setting-description\">\n                Enable dark theme for better viewing in low light\n              </p>\n            </div>\n            <label className=\"toggle-switch\">\n              <input\n                type=\"checkbox\"\n                checked={settings.darkMode}\n                onChange={(e) => handleSettingChange('darkMode', e.target.checked)}\n                aria-label=\"Toggle dark mode\"\n              />\n              <span className=\"toggle-slider\"></span>\n            </label>\n          </div>\n        </div>\n\n        {/* Backup Settings */}\n        <div className=\"settings-section\">\n          <h3>Backup & Restore</h3>\n          \n          <div className=\"setting-item\">\n            <div className=\"setting-info\">\n              <label className=\"setting-label\">Auto Backup</label>\n              <p className=\"setting-description\">\n                Automatically backup data to browser storage\n              </p>\n            </div>\n            <label className=\"toggle-switch\">\n              <input\n                type=\"checkbox\"\n                checked={settings.autoBackup}\n                onChange={(e) => handleSettingChange('autoBackup', e.target.checked)}\n                aria-label=\"Toggle auto backup\"\n              />\n              <span className=\"toggle-slider\"></span>\n            </label>\n          </div>\n\n          <div className=\"setting-item\">\n            <div className=\"setting-info\">\n              <label className=\"setting-label\">Default Encryption</label>\n              <p className=\"setting-description\">\n                Encrypt exports by default (you can still choose per export)\n              </p>\n            </div>\n            <label className=\"toggle-switch\">\n              <input\n                type=\"checkbox\"\n                checked={settings.defaultEncryption}\n                onChange={(e) => handleSettingChange('defaultEncryption', e.target.checked)}\n                aria-label=\"Toggle default encryption\"\n              />\n              <span className=\"toggle-slider\"></span>\n            </label>\n          </div>\n        </div>\n\n        {/* Data Management */}\n        <div className=\"settings-section\">\n          <h3>Data Management</h3>\n          \n          <div className=\"setting-actions\">\n            <button onClick={clearAllData} className=\"btn btn-error\">\n              Clear All Data\n            </button>\n          </div>\n          \n          <div className=\"setting-info\">\n            <p>Use the Export & Import section below for advanced backup and restore functionality with encryption options.</p>\n          </div>\n        </div>\n\n        {/* Export/Import Section */}\n        <ExportImport \n          machines={machines} \n          onImportComplete={handleImportComplete}\n        />\n\n        {/* Machine Groups */}\n        <div className=\"settings-section\">\n          <h3>Machine Groups</h3>\n          <p className=\"setting-description\">\n            Organize your machines into groups for better management\n          </p>\n          <GroupManager machines={machines} onGroupChange={handleGroupChange} />\n        </div>\n\n        {/* App Information */}\n        <div className=\"settings-section\">\n          <h3>App Information</h3>\n          <VersionDisplay showUpdateButton={true} />\n        </div>\n\n        {/* Save Button */}\n        <div className=\"settings-actions\">\n          <button\n            onClick={saveSettings}\n            disabled={saving}\n            className=\"btn btn-primary btn-lg\"\n          >\n            {saving ? <LoadingSpinner size=\"sm\" /> : 'Save Settings'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n"],"names":["exportService","exportData","options","backupData","version","exportDate","Date","machines","settings","history","includeMachines","indexedDBService","selectedMachineIds","length","machineId","machine","getMachine","push","getAllMachines","includeSettings","getSettings","includeHistory","getConnectionHistory","jsonString","JSON","stringify","encrypt","password","encryptedWrapper","encrypted","data","CryptoJS","toString","console","log","mimeType","Blob","type","importData","file","result","success","importedMachines","importedSettings","importedHistory","errors","warnings","fileContent","this","readFileAsText","parsedData","parse","decrypted","decrypt","Utf8","parseError","error","decryptError","validateBackupData","importBackupData","fileError","concat","generateFilename","timestamp","toISOString","replace","slice","scope","encryption","downloadBlob","blob","filename","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","Promise","resolve","reject","reader","FileReader","onload","e","_e$target","target","onerror","readAsText","Array","isArray","id","updateMachine","name","addMachine","machineError","historyEntry","addConnectionHistory","historyError","currentSettings","mergedSettings","mergeSettings","updateSettings","settingsError","current","imported","_objectSpread","darkMode","undefined","autoBackup","defaultEncryption","categories","from","Set","customFieldDefinitions","mergeCustomFieldDefinitions","merged","importedField","existingIndex","findIndex","field","detectEncryption","content","_unused","getExportSummary","machineCount","hasSettings","hasHistory","estimatedSizeBytes","estimatedSize","formatFileSize","bytes","i","Math","floor","parseFloat","pow","toFixed","testExportImportCycle","arguments","exportBlob","testFile","File","importResult","PasswordPrompt","_ref2","onSubmit","onCancel","setPassword","useState","_jsxs","preventDefault","trim","className","children","_jsx","value","onChange","autoComplete","placeholder","autoFocus","onClick","disabled","_ref","onImportComplete","isExporting","setIsExporting","isImporting","setIsImporting","exportOptions","setExportOptions","setImportResult","showPasswordPrompt","setShowPasswordPrompt","pendingFile","setPendingFile","fileInputRef","useRef","handleImport","async","alert","join","checked","prev","selectAllMachines","map","m","clearMachineSelection","includes","toggleMachineSelection","filter","anydeskId","_Fragment","LoadingSpinner","size","ref","accept","_event$target$files","event","files","htmlFor","index","warning","showUpdateButton","versionInfo","setVersionInfo","isChecking","setIsChecking","showDetails","setShowDetails","useEffect","loadVersionInfo","info","versionService","getStoredVersionInfo","getFormattedVersion","isUpdateAvailable","title","latest","lastChecked","toLocaleDateString","toLocaleTimeString","forceUpdateCheck","handleUpdate","updateUrl","window","open","location","reload","onGroupChange","groups","setGroups","loading","setLoading","showCreateForm","setShowCreateForm","editingGroup","setEditingGroup","formData","setFormData","description","color","loadGroups","groupsWithCounts","group","groupId","newGroup","crypto","randomUUID","createdAt","updatedAt","updatedGroups","g","required","rows","style","backgroundColor","handleCancel","handleEdit","confirm","machinesToUpdate","handleDelete","Settings","setSettings","setMachines","saving","setSaving","loadSettings","loadMachines","settingsData","documentElement","classList","add","remove","allMachines","handleSettingChange","newSettings","showBackupConfirmationDialog","overlay","cssText","modal","innerHTML","checkbox","querySelector","cancelBtn","confirmBtn","addEventListener","updateConfirmButton","opacity","handleEscape","key","removeEventListener","backupService","clearBackup","clearAllData","localStorage","setItem","ExportImport","GroupManager","handleGroupChange","VersionDisplay"],"sourceRoot":""}