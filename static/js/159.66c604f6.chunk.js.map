{"version":3,"file":"static/js/159.66c604f6.chunk.js","mappings":"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","sources":["utils/dateUtils.ts","services/anydesk.service.ts","components/AnydeskLaunchButton.tsx","pages/Dashboard.tsx"],"sourcesContent":["/**\r\n * Utility functions for handling date conversion and formatting\r\n * This ensures consistent date handling across the application\r\n */\r\n\r\n/**\r\n * Safely converts a date value to a Date object\r\n * Handles both Date objects and date strings from IndexedDB\r\n */\r\nexport const toDate = (dateValue: Date | string | undefined | null): Date | null => {\r\n  if (!dateValue) return null;\r\n  if (dateValue instanceof Date) return dateValue;\r\n  return new Date(dateValue);\r\n};\r\n\r\n/**\r\n * Safely formats a date value to a localized date string\r\n * Returns 'Never' for null/undefined values\r\n */\r\nexport const formatDate = (dateValue: Date | string | undefined | null): string => {\r\n  const date = toDate(dateValue);\r\n  if (!date) return 'Never';\r\n  return date.toLocaleDateString();\r\n};\r\n\r\n/**\r\n * Safely formats a date value to a localized date and time string\r\n * Returns 'Never' for null/undefined values\r\n */\r\nexport const formatDateTime = (dateValue: Date | string | undefined | null): string => {\r\n  const date = toDate(dateValue);\r\n  if (!date) return 'Never';\r\n  return date.toLocaleString();\r\n};\r\n\r\n/**\r\n * Formats a date for relative time display (e.g., \"2 hours ago\")\r\n */\r\nexport const formatRelativeTime = (dateValue: Date | string | undefined | null): string => {\r\n  const date = toDate(dateValue);\r\n  if (!date) return 'Never';\r\n  \r\n  const now = new Date();\r\n  const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n  \r\n  if (diffInMinutes < 1) return 'Just now';\r\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\r\n  if (diffInMinutes < 10080) return `${Math.floor(diffInMinutes / 1440)}d ago`;\r\n  return date.toLocaleDateString();\r\n};\r\n\r\n/**\r\n * Formats a date for relative time display in hours (e.g., \"2 hours ago\")\r\n */\r\nexport const formatRelativeTimeHours = (dateValue: Date | string | undefined | null): string => {\r\n  const date = toDate(dateValue);\r\n  if (!date) return 'Never';\r\n  \r\n  const now = new Date();\r\n  const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\r\n  \r\n  if (diffInHours < 1) return 'Just now';\r\n  if (diffInHours < 24) return `${diffInHours}h ago`;\r\n  if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`;\r\n  return date.toLocaleDateString();\r\n};\r\n","import { AnyDeskLaunchResult } from '../types/machine.types';\r\nimport { indexedDBService } from './indexedDB.service';\r\n\r\nclass AnyDeskService {\r\n  /**\r\n   * Launches AnyDesk with the specified machine ID\r\n   */\r\n  async launchAnyDesk(machineId: string): Promise<AnyDeskLaunchResult> {\r\n    try {\r\n      // Get machine details\r\n      const machine = await indexedDBService.getMachine(machineId);\r\n      if (!machine) {\r\n        return {\r\n          success: false,\r\n          method: 'failed',\r\n          error: 'Machine not found'\r\n        };\r\n      }\r\n\r\n      // Log connection attempt\r\n      await indexedDBService.logConnectionAttempt(machineId, 'launch_attempt');\r\n\r\n      // Try AnyDesk URL scheme first\r\n      const anydeskUrl = `anydesk://${machine.anydeskId}`;\r\n      const fallbackUrl = `https://anydesk.com/${machine.anydeskId}`;\r\n\r\n      try {\r\n        // Attempt to open AnyDesk app\r\n        const opened = await this.openAnyDeskApp(anydeskUrl);\r\n        \r\n        if (opened) {\r\n          // Log successful launch attempt\r\n          await indexedDBService.logConnectionAttempt(machineId, 'launch_success', 'AnyDesk app launched');\r\n          \r\n          return {\r\n            success: true,\r\n            method: 'app'\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.log('AnyDesk app not available, trying web fallback');\r\n      }\r\n\r\n      // Fallback to web version\r\n      try {\r\n        window.open(fallbackUrl, '_blank');\r\n        \r\n        // Log web fallback attempt\r\n        await indexedDBService.logConnectionAttempt(machineId, 'launch_attempt', 'Opened web version');\r\n        \r\n        return {\r\n          success: true,\r\n          method: 'web'\r\n        };\r\n      } catch (error) {\r\n        await indexedDBService.logConnectionAttempt(machineId, 'launch_failure', `Web fallback failed: ${error}`);\r\n        \r\n        return {\r\n          success: false,\r\n          method: 'failed',\r\n          error: 'Failed to open AnyDesk app or web version'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('AnyDesk launch error:', error);\r\n      \r\n      // Log failure\r\n      await indexedDBService.logConnectionAttempt(machineId, 'launch_failure', `Launch error: ${error}`);\r\n      \r\n      return {\r\n        success: false,\r\n        method: 'failed',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to open AnyDesk application using URL scheme\r\n   */\r\n  private async openAnyDeskApp(url: string): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      // Create a hidden iframe to attempt the URL scheme\r\n      const iframe = document.createElement('iframe');\r\n      iframe.style.display = 'none';\r\n      iframe.src = url;\r\n      \r\n      // Timeout to detect if the app opened\r\n      const timeout = setTimeout(() => {\r\n        document.body.removeChild(iframe);\r\n        resolve(false);\r\n      }, 2000);\r\n\r\n      // Listen for focus events to detect if app opened\r\n      const handleFocus = () => {\r\n        clearTimeout(timeout);\r\n        document.body.removeChild(iframe);\r\n        window.removeEventListener('focus', handleFocus);\r\n        resolve(true);\r\n      };\r\n\r\n      window.addEventListener('focus', handleFocus);\r\n      document.body.appendChild(iframe);\r\n\r\n      // Also try direct window.location as fallback\r\n      try {\r\n        window.location.href = url;\r\n        setTimeout(() => {\r\n          clearTimeout(timeout);\r\n          document.body.removeChild(iframe);\r\n          window.removeEventListener('focus', handleFocus);\r\n          resolve(true);\r\n        }, 1000);\r\n      } catch (error) {\r\n        // Ignore errors, let the iframe method handle it\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if AnyDesk is likely installed on the system\r\n   */\r\n  async checkAnyDeskAvailability(): Promise<boolean> {\r\n    try {\r\n      // Try to detect AnyDesk installation\r\n      // This is a simple heuristic - in reality, we can't reliably detect\r\n      // if AnyDesk is installed without user interaction\r\n      \r\n      // For now, we'll assume it might be available and let the launch attempt determine\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error checking AnyDesk availability:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets AnyDesk download URL for the current platform\r\n   */\r\n  getAnyDeskDownloadUrl(): string {\r\n    const userAgent = navigator.userAgent.toLowerCase();\r\n    \r\n    if (userAgent.includes('windows')) {\r\n      return 'https://anydesk.com/downloads/windows';\r\n    } else if (userAgent.includes('mac')) {\r\n      return 'https://anydesk.com/downloads/macos';\r\n    } else if (userAgent.includes('linux')) {\r\n      return 'https://anydesk.com/downloads/linux';\r\n    } else if (userAgent.includes('android')) {\r\n      return 'https://play.google.com/store/apps/details?id=com.anydesk.anydeskandroid';\r\n    } else if (userAgent.includes('iphone') || userAgent.includes('ipad')) {\r\n      return 'https://apps.apple.com/app/anydesk/id1114002967';\r\n    }\r\n    \r\n    return 'https://anydesk.com/downloads';\r\n  }\r\n\r\n  /**\r\n   * Formats AnyDesk ID for display (adds spaces for readability)\r\n   */\r\n  formatAnyDeskId(id: string): string {\r\n    // Remove any non-numeric characters\r\n    const cleanId = id.replace(/\\D/g, '');\r\n    \r\n    // Add spaces every 3 digits for readability\r\n    return cleanId.replace(/(\\d{3})(?=\\d)/g, '$1 ');\r\n  }\r\n\r\n  /**\r\n   * Validates AnyDesk ID format\r\n   */\r\n  isValidAnyDeskId(id: string): boolean {\r\n    // AnyDesk IDs are typically 9 digits\r\n    const cleanId = id.replace(/\\D/g, '');\r\n    return cleanId.length === 9 && /^\\d+$/.test(cleanId);\r\n  }\r\n\r\n  /**\r\n   * Shows user-friendly message based on launch result\r\n   */\r\n  getLaunchMessage(result: AnyDeskLaunchResult, machineName: string): string {\r\n    if (result.success) {\r\n      if (result.method === 'app') {\r\n        return `AnyDesk app opened for ${machineName}. If the connection doesn't start automatically, enter the ID: ${result.method}`;\r\n      } else if (result.method === 'web') {\r\n        return `AnyDesk web version opened for ${machineName}. You can also download the AnyDesk app for better experience.`;\r\n      }\r\n    }\r\n    \r\n    return `Failed to launch AnyDesk for ${machineName}. ${result.error || 'Please ensure AnyDesk is installed or try again.'}`;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const anydeskService = new AnyDeskService();\r\n","import React, { useState } from 'react';\r\nimport { anydeskService } from '../services/anydesk.service';\r\nimport { AnyDeskLaunchResult } from '../types/machine.types';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport './AnydeskLaunchButton.css';\r\n\r\ninterface AnydeskLaunchButtonProps {\r\n  machineId: string;\r\n  machineName: string;\r\n  anydeskId: string;\r\n  size?: 'sm' | 'md' | 'lg';\r\n  variant?: 'primary' | 'secondary' | 'icon';\r\n  onLaunchResult?: (result: AnyDeskLaunchResult) => void;\r\n  className?: string;\r\n}\r\n\r\nconst AnydeskLaunchButton: React.FC<AnydeskLaunchButtonProps> = ({\r\n  machineId,\r\n  machineName,\r\n  anydeskId,\r\n  size = 'md',\r\n  variant = 'primary',\r\n  onLaunchResult,\r\n  className = ''\r\n}) => {\r\n  const [isLaunching, setIsLaunching] = useState(false);\r\n  const [lastResult, setLastResult] = useState<AnyDeskLaunchResult | null>(null);\r\n\r\n  const handleLaunch = async () => {\r\n    if (isLaunching) return;\r\n\r\n    try {\r\n      setIsLaunching(true);\r\n      setLastResult(null);\r\n\r\n      const result = await anydeskService.launchAnyDesk(machineId);\r\n      setLastResult(result);\r\n      \r\n      if (onLaunchResult) {\r\n        onLaunchResult(result);\r\n      }\r\n\r\n      // Show user feedback\r\n      const message = anydeskService.getLaunchMessage(result, machineName);\r\n      \r\n      if (result.success) {\r\n        // Show success message briefly\r\n        if (result.method === 'web') {\r\n          alert(`✅ ${message}\\n\\n💡 Tip: Download AnyDesk app for better experience!`);\r\n        } else {\r\n          alert(`✅ ${message}`);\r\n        }\r\n      } else {\r\n        // Show error message with download option\r\n        const shouldDownload = window.confirm(`❌ ${message}\\n\\nWould you like to download AnyDesk?`);\r\n        if (shouldDownload) {\r\n          window.open(anydeskService.getAnyDeskDownloadUrl(), '_blank');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Launch error:', error);\r\n      const errorResult: AnyDeskLaunchResult = {\r\n        success: false,\r\n        method: 'failed',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n      setLastResult(errorResult);\r\n      \r\n      if (onLaunchResult) {\r\n        onLaunchResult(errorResult);\r\n      }\r\n      \r\n      alert(`❌ Failed to launch AnyDesk: ${errorResult.error}`);\r\n    } finally {\r\n      setIsLaunching(false);\r\n    }\r\n  };\r\n\r\n  const getButtonText = () => {\r\n    if (isLaunching) {\r\n      return size === 'sm' ? '...' : 'Launching...';\r\n    }\r\n    \r\n    switch (variant) {\r\n      case 'icon':\r\n        return '🚀';\r\n      case 'secondary':\r\n        return `Connect to ${machineName}`;\r\n      default:\r\n        return 'Launch AnyDesk';\r\n    }\r\n  };\r\n\r\n  const getButtonClass = () => {\r\n    const baseClass = 'anydesk-launch-btn';\r\n    const sizeClass = `anydesk-launch-btn-${size}`;\r\n    const variantClass = `anydesk-launch-btn-${variant}`;\r\n    const stateClass = isLaunching ? 'anydesk-launch-btn-loading' : '';\r\n    const resultClass = lastResult ? `anydesk-launch-btn-${lastResult.success ? 'success' : 'error'}` : '';\r\n    \r\n    return `${baseClass} ${sizeClass} ${variantClass} ${stateClass} ${resultClass} ${className}`.trim();\r\n  };\r\n\r\n  const getButtonIcon = () => {\r\n    if (isLaunching) {\r\n      return <LoadingSpinner size={size === 'sm' ? 'sm' : 'md'} />;\r\n    }\r\n    \r\n    if (lastResult?.success) {\r\n      return '✅';\r\n    }\r\n    \r\n    if (lastResult && !lastResult.success) {\r\n      return '❌';\r\n    }\r\n    \r\n    return '🚀';\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={getButtonClass()}\r\n      onClick={handleLaunch}\r\n      disabled={isLaunching}\r\n      title={`Launch AnyDesk for ${machineName} (ID: ${anydeskId})`}\r\n    >\r\n      <span className=\"anydesk-launch-btn-icon\">{getButtonIcon()}</span>\r\n      <span className=\"anydesk-launch-btn-text\">{getButtonText()}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AnydeskLaunchButton;\r\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Machine, Group } from '../types/machine.types';\nimport { indexedDBService } from '../services/indexedDB.service';\nimport { useAutoBackupOnChange } from '../hooks/useAutoBackup';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport AnydeskLaunchButton from '../components/AnydeskLaunchButton';\nimport { formatRelativeTimeHours } from '../utils/dateUtils';\nimport { versionService } from '../services/version.service';\nimport './Dashboard.css';\n\nconst Dashboard: React.FC = () => {\n  const [machines, setMachines] = useState<Machine[]>([]);\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n  const [hasPasswordFilter, setHasPasswordFilter] = useState<boolean | null>(null);\n  const [filteredMachines, setFilteredMachines] = useState<Machine[]>([]);\n\n  // Auto-backup when machines change\n  useAutoBackupOnChange([machines]);\n\n  const loadMachines = async () => {\n    try {\n      setLoading(true);\n      const allMachines = await indexedDBService.getAllMachines();\n      setMachines(allMachines);\n    } catch (error) {\n      console.error('Failed to load machines:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadGroups = async () => {\n    try {\n      const settings = await indexedDBService.getSettings();\n      setGroups(settings?.groups || []);\n    } catch (error) {\n      console.error('Failed to load groups:', error);\n    }\n  };\n\n  const filterMachines = useCallback(() => {\n    let filtered = machines;\n\n    // Search term filter\n    if (searchTerm.trim()) {\n      const searchLower = searchTerm.toLowerCase();\n      filtered = filtered.filter(machine =>\n        machine.name.toLowerCase().includes(searchLower) ||\n        machine.anydeskId.toLowerCase().includes(searchLower) ||\n        machine.address?.toLowerCase().includes(searchLower) ||\n        machine.notes?.toLowerCase().includes(searchLower) ||\n        machine.tags.some(tag => tag.toLowerCase().includes(searchLower)) ||\n        machine.categories.some(cat => cat.toLowerCase().includes(searchLower))\n      );\n    }\n\n    // Category filter\n    if (selectedCategories.length > 0) {\n      filtered = filtered.filter(machine =>\n        selectedCategories.some(category => machine.categories.includes(category))\n      );\n    }\n\n    // Tag filter\n    if (selectedTags.length > 0) {\n      filtered = filtered.filter(machine =>\n        selectedTags.some(tag => machine.tags.includes(tag))\n      );\n    }\n\n    // Password filter\n    if (hasPasswordFilter !== null) {\n      filtered = filtered.filter(machine =>\n        hasPasswordFilter ? machine.passwords.length > 0 : machine.passwords.length === 0\n      );\n    }\n\n    // Group filter\n    if (selectedGroups.length > 0) {\n      filtered = filtered.filter(machine =>\n        selectedGroups.includes(machine.groupId || '')\n      );\n    }\n\n    setFilteredMachines(filtered);\n  }, [machines, searchTerm, selectedCategories, selectedTags, selectedGroups, hasPasswordFilter]);\n\n  useEffect(() => {\n    loadMachines();\n    loadGroups();\n  }, []);\n\n  useEffect(() => {\n    filterMachines();\n  }, [filterMachines]);\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const handleGroupToggle = (groupId: string) => {\n    setSelectedGroups(prev => \n      prev.includes(groupId) \n        ? prev.filter(id => id !== groupId)\n        : [...prev, groupId]\n    );\n  };\n\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setSelectedCategories([]);\n    setSelectedTags([]);\n    setSelectedGroups([]);\n    setHasPasswordFilter(null);\n  };\n\n  // Get unique categories and tags from all machines\n  const getAllCategories = useCallback(() => {\n    const categories = new Set<string>();\n    machines.forEach(machine => {\n      machine.categories.forEach(category => categories.add(category));\n    });\n    return Array.from(categories).sort();\n  }, [machines]);\n\n  const getAllTags = useCallback(() => {\n    const tags = new Set<string>();\n    machines.forEach(machine => {\n      machine.tags.forEach(tag => tags.add(tag));\n    });\n    return Array.from(tags).sort();\n  }, [machines]);\n\n  const handleCategoryToggle = (category: string) => {\n    setSelectedCategories(prev =>\n      prev.includes(category)\n        ? prev.filter(c => c !== category)\n        : [...prev, category]\n    );\n  };\n\n  const handleTagToggle = (tag: string) => {\n    setSelectedTags(prev =>\n      prev.includes(tag)\n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n\n  if (loading) {\n    return (\n      <div className=\"dashboard-loading\">\n        <LoadingSpinner size=\"lg\" />\n        <p>Loading machines...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <div className=\"dashboard-title-section\">\n          <h1 className=\"dashboard-title\">Machine Manager</h1>\n          <span className=\"version-indicator\">{versionService.getFormattedVersion()}</span>\n          <span className=\"new-feature-badge\">✨ New</span>\n          <span className=\"version-badge\">v1.0.4</span>\n        </div>\n        \n        <div className=\"dashboard-stats\">\n          <div className=\"stat-card\">\n            <span className=\"stat-number\">{machines.length}</span>\n            <span className=\"stat-label\">Total Machines</span>\n          </div>\n          <div className=\"stat-card\">\n            <span className=\"stat-number\">\n              {machines.filter(m => m.connectionCount > 0).length}\n            </span>\n            <span className=\"stat-label\">Connected</span>\n          </div>\n          <div className=\"stat-card\">\n            <span className=\"stat-number\">\n              {machines.filter(m => m.lastAccessed).length}\n            </span>\n            <span className=\"stat-label\">Recently Used</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"search-filter-bar\">\n        <input\n          type=\"text\"\n          placeholder=\"Search machines by name, ID, address, or tags...\"\n          value={searchTerm}\n          onChange={handleSearchChange}\n          className=\"search-input\"\n        />\n        \n        <div className=\"filter-section\">\n          <div className=\"filter-group\">\n            <h4>Categories</h4>\n            <div className=\"filter-chips\">\n              {getAllCategories().map(category => (\n                <button\n                  key={category}\n                  className={`filter-chip ${selectedCategories.includes(category) ? 'active' : ''}`}\n                  onClick={() => handleCategoryToggle(category)}\n                >\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"filter-group\">\n            <h4>Tags</h4>\n            <div className=\"filter-chips\">\n              {getAllTags().map(tag => (\n                <button\n                  key={tag}\n                  className={`filter-chip ${selectedTags.includes(tag) ? 'active' : ''}`}\n                  onClick={() => handleTagToggle(tag)}\n                >\n                  {tag}\n                </button>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"filter-group\">\n            <h4>Password</h4>\n            <div className=\"filter-chips\">\n              <button\n                className={`filter-chip ${hasPasswordFilter === true ? 'active' : ''}`}\n                onClick={() => setHasPasswordFilter(hasPasswordFilter === true ? null : true)}\n              >\n                Has Passwords\n              </button>\n              <button\n                className={`filter-chip ${hasPasswordFilter === false ? 'active' : ''}`}\n                onClick={() => setHasPasswordFilter(hasPasswordFilter === false ? null : false)}\n              >\n                No Passwords\n              </button>\n            </div>\n          </div>\n          \n          {groups.length > 0 && (\n            <div className=\"filter-group\">\n              <h4>Groups</h4>\n              <div className=\"filter-chips\">\n                {groups.map(group => (\n                  <button\n                    key={group.id}\n                    className={`filter-chip ${selectedGroups.includes(group.id) ? 'active' : ''}`}\n                    onClick={() => handleGroupToggle(group.id)}\n                    style={{ borderLeftColor: group.color }}\n                  >\n                    {group.name}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {(selectedCategories.length > 0 || selectedTags.length > 0 || selectedGroups.length > 0 || hasPasswordFilter !== null) && (\n            <button className=\"clear-filters-btn\" onClick={clearAllFilters}>\n              Clear All Filters\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"dashboard-actions\">\n        <Link to=\"/machine/new\" className=\"btn btn-primary\">\n          <svg className=\"btn-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n            <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"/>\n            <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"/>\n          </svg>\n          Add Machine\n        </Link>\n      </div>\n\n      {filteredMachines.length === 0 ? (\n        <div className=\"empty-state\">\n          {machines.length === 0 ? (\n            <>\n              <div className=\"empty-state-icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                  <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"/>\n                  <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"/>\n                  <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"/>\n                </svg>\n              </div>\n              <h3>No machines yet</h3>\n              <p>Get started by adding your first machine to manage.</p>\n              <Link to=\"/machine/new\" className=\"btn btn-primary\">\n                Add Your First Machine\n              </Link>\n            </>\n          ) : (\n            <>\n              <div className=\"empty-state-icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                  <circle cx=\"11\" cy=\"11\" r=\"8\"/>\n                  <path d=\"m21 21-4.35-4.35\"/>\n                </svg>\n              </div>\n              <h3>No machines found</h3>\n              <p>Try adjusting your search terms.</p>\n              <button \n                className=\"btn btn-secondary\"\n                onClick={() => setSearchTerm('')}\n              >\n                Clear Search\n              </button>\n            </>\n          )}\n        </div>\n      ) : (\n        <div className=\"machine-grid\">\n          {filteredMachines.map((machine) => (\n            <MachineCard key={machine.id} machine={machine} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface MachineCardProps {\n  machine: Machine;\n}\n\nconst MachineCard: React.FC<MachineCardProps> = ({ machine }) => {\n  const formatLastAccessed = (date?: Date) => {\n    return formatRelativeTimeHours(date);\n  };\n\n  const handleLaunchResult = (result: any) => {\n    // Handle launch result if needed\n    console.log('AnyDesk launch result:', result);\n  };\n\n  return (\n    <div className=\"machine-card\">\n      <Link to={`/machine/${machine.id}`} className=\"machine-card-link\">\n        <div className=\"machine-card-header\">\n          <h3 className=\"machine-name\">{machine.name}</h3>\n          <span className=\"machine-connection-indicator\">\n            {machine.connectionCount > 0 && (\n              <span className=\"connection-count\" title={`Connected ${machine.connectionCount} times`}>\n                {machine.connectionCount}\n              </span>\n            )}\n          </span>\n        </div>\n        \n        <div className=\"machine-id\">{machine.anydeskId}</div>\n        \n        {machine.address && (\n          <div className=\"machine-address\">{machine.address}</div>\n        )}\n        \n        {machine.tags.length > 0 && (\n          <div className=\"machine-tags\">\n            {machine.tags.slice(0, 3).map((tag, index) => (\n              <span key={index} className=\"machine-tag\">\n                {tag}\n              </span>\n            ))}\n            {machine.tags.length > 3 && (\n              <span className=\"machine-tag\">+{machine.tags.length - 3}</span>\n            )}\n          </div>\n        )}\n        \n        <div className=\"machine-footer\">\n          <span className=\"machine-last-accessed\">\n            Last: {formatLastAccessed(machine.lastAccessed)}\n          </span>\n          <span className=\"machine-password-count\">\n            {machine.passwords.length} password{machine.passwords.length !== 1 ? 's' : ''}\n          </span>\n        </div>\n      </Link>\n      \n      <div className=\"machine-card-actions\">\n        <AnydeskLaunchButton\n          machineId={machine.id}\n          machineName={machine.name}\n          anydeskId={machine.anydeskId}\n          size=\"sm\"\n          variant=\"primary\"\n          onLaunchResult={handleLaunchResult}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"names":["toDate","dateValue","Date","formatDate","date","toLocaleDateString","formatRelativeTime","now","diffInMinutes","Math","floor","getTime","concat","formatRelativeTimeHours","diffInHours","anydeskService","launchAnyDesk","machineId","machine","indexedDBService","getMachine","success","method","error","logConnectionAttempt","anydeskUrl","anydeskId","fallbackUrl","this","openAnyDeskApp","console","log","window","open","Error","message","url","Promise","resolve","iframe","document","createElement","style","display","src","timeout","setTimeout","body","removeChild","handleFocus","clearTimeout","removeEventListener","addEventListener","appendChild","location","href","checkAnyDeskAvailability","getAnyDeskDownloadUrl","userAgent","navigator","toLowerCase","includes","formatAnyDeskId","id","replace","isValidAnyDeskId","cleanId","length","test","getLaunchMessage","result","machineName","_ref","size","variant","onLaunchResult","className","isLaunching","setIsLaunching","useState","lastResult","setLastResult","_jsxs","getButtonClass","sizeClass","variantClass","stateClass","resultClass","trim","onClick","async","alert","confirm","errorResult","disabled","title","children","_jsx","LoadingSpinner","getButtonText","MachineCard","Link","to","name","connectionCount","address","tags","slice","map","tag","index","lastAccessed","passwords","AnydeskLaunchButton","Dashboard","machines","setMachines","groups","setGroups","loading","setLoading","searchTerm","setSearchTerm","selectedCategories","setSelectedCategories","selectedTags","setSelectedTags","selectedGroups","setSelectedGroups","hasPasswordFilter","setHasPasswordFilter","filteredMachines","setFilteredMachines","useAutoBackupOnChange","filterMachines","useCallback","filtered","searchLower","filter","_machine$address","_machine$notes","notes","some","categories","cat","category","groupId","useEffect","allMachines","getAllMachines","loadMachines","settings","getSettings","loadGroups","getAllCategories","Set","forEach","add","Array","from","sort","getAllTags","versionService","getFormattedVersion","m","type","placeholder","value","onChange","e","target","prev","c","handleCategoryToggle","t","handleTagToggle","group","handleGroupToggle","borderLeftColor","color","clearAllFilters","viewBox","fill","stroke","strokeWidth","x1","y1","x2","y2","_Fragment","x","y","width","height","rx","ry","cx","cy","r","d"],"sourceRoot":""}