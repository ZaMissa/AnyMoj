{"version":3,"file":"static/js/732.b5c0a54b.chunk.js","mappings":"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","sources":["pages/MachineDetail.tsx","utils/dateUtils.ts","services/anydesk.service.ts","components/AnydeskLaunchButton.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link, useNavigate } from 'react-router-dom';\r\nimport { Machine, AnyDeskLaunchResult } from '../types/machine.types';\r\nimport { indexedDBService } from '../services/indexedDB.service';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport AnydeskLaunchButton from '../components/AnydeskLaunchButton';\r\nimport { formatDate } from '../utils/dateUtils';\r\nimport './MachineDetail.css';\r\n\r\n// Password item component with show/hide functionality\r\nconst PasswordItem: React.FC<{ password: string; index: number }> = ({ password, index }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  return (\r\n    <div className=\"password-item\">\r\n      <span className=\"password-value\">\r\n        {isVisible ? password : '*'.repeat(password.length)}\r\n      </span>\r\n      <button \r\n        className=\"btn btn-sm\"\r\n        onClick={() => setIsVisible(!isVisible)}\r\n      >\r\n        {isVisible ? 'Hide' : 'Show'}\r\n      </button>\r\n      <button \r\n        className=\"btn btn-sm btn-secondary\"\r\n        onClick={() => {\r\n          navigator.clipboard.writeText(password);\r\n          alert('Password copied to clipboard!');\r\n        }}\r\n      >\r\n        Copy\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MachineDetail: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [machine, setMachine] = useState<Machine | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      loadMachine(id);\r\n    }\r\n  }, [id]);\r\n\r\n  const loadMachine = async (machineId: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const machineData = await indexedDBService.getMachine(machineId);\r\n      if (machineData) {\r\n        setMachine(machineData);\r\n      } else {\r\n        navigate('/');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load machine:', error);\r\n      navigate('/');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!machine || !window.confirm('Are you sure you want to delete this machine?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await indexedDBService.deleteMachine(machine.id);\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('Failed to delete machine:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"page-loading\">\r\n        <LoadingSpinner size=\"lg\" />\r\n        <p>Loading machine details...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!machine) {\r\n    return (\r\n      <div className=\"page-error\">\r\n        <h2>Machine not found</h2>\r\n        <Link to=\"/\" className=\"btn btn-primary\">Back to Dashboard</Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"machine-detail\">\r\n      <div className=\"page-header\">\r\n        <Link to=\"/\" className=\"btn btn-secondary\">\r\n          ← Back to Dashboard\r\n        </Link>\r\n        <h1 className=\"page-title\">{machine.name}</h1>\r\n      </div>\r\n\r\n      <div className=\"machine-info\">\r\n        <div className=\"info-section\">\r\n          <h3>Basic Information</h3>\r\n          <div className=\"info-grid\">\r\n            <div className=\"info-item\">\r\n              <label>Machine ID</label>\r\n              <span className=\"machine-id\">{machine.id}</span>\r\n              <button\r\n                className=\"btn btn-secondary btn-sm copy-btn\"\r\n                onClick={() => {\r\n                  navigator.clipboard.writeText(machine.id);\r\n                  alert('Machine ID copied to clipboard!');\r\n                }}\r\n                title=\"Copy Machine ID\"\r\n              >\r\n                📋 Copy ID\r\n              </button>\r\n            </div>\r\n            <div className=\"info-item\">\r\n              <label>AnyDesk ID</label>\r\n              <span className=\"anydesk-id\">{machine.anydeskId}</span>\r\n              <button\r\n                className=\"btn btn-secondary btn-sm copy-btn\"\r\n                onClick={() => {\r\n                  navigator.clipboard.writeText(machine.anydeskId);\r\n                  alert('AnyDesk ID copied to clipboard!');\r\n                }}\r\n                title=\"Copy AnyDesk ID\"\r\n              >\r\n                📋 Copy ID\r\n              </button>\r\n              <AnydeskLaunchButton\r\n                machineId={machine.id}\r\n                machineName={machine.name}\r\n                anydeskId={machine.anydeskId}\r\n                size=\"sm\"\r\n                variant=\"primary\"\r\n              />\r\n            </div>\r\n            {machine.address && (\r\n              <div className=\"info-item\">\r\n                <label>Address</label>\r\n                <span>{machine.address}</span>\r\n              </div>\r\n            )}\r\n            <div className=\"info-item\">\r\n              <label>Created</label>\r\n              <span>{formatDate(machine.createdAt)}</span>\r\n            </div>\r\n            {machine.lastAccessed && (\r\n              <div className=\"info-item\">\r\n                <label>Last Accessed</label>\r\n                <span>{formatDate(machine.lastAccessed)}</span>\r\n              </div>\r\n            )}\r\n            <div className=\"info-item\">\r\n              <label>Connections</label>\r\n              <span>{machine.connectionCount} times</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {machine.notes && (\r\n          <div className=\"info-section\">\r\n            <h3>Notes</h3>\r\n            <p className=\"notes\">{machine.notes}</p>\r\n          </div>\r\n        )}\r\n\r\n        {machine.passwords.length > 0 && (\r\n          <div className=\"info-section\">\r\n            <h3>Passwords</h3>\r\n            <div className=\"password-list\">\r\n              {machine.passwords.map((password, index) => (\r\n                <PasswordItem key={index} password={password} index={index} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {machine.tags.length > 0 && (\r\n          <div className=\"info-section\">\r\n            <h3>Tags</h3>\r\n            <div className=\"tags-list\">\r\n              {machine.tags.map((tag, index) => (\r\n                <span key={index} className=\"tag\">{tag}</span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {machine.categories.length > 0 && (\r\n          <div className=\"info-section\">\r\n            <h3>Categories</h3>\r\n            <div className=\"categories-list\">\r\n              {machine.categories.map((category, index) => (\r\n                <span key={index} className=\"category\">{category}</span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"page-actions\">\r\n        <AnydeskLaunchButton\r\n          machineId={machine.id}\r\n          machineName={machine.name}\r\n          anydeskId={machine.anydeskId}\r\n          size=\"lg\"\r\n          variant=\"primary\"\r\n        />\r\n        <Link to={`/machine/${machine.id}/edit`} className=\"btn btn-secondary\">\r\n          Edit Machine\r\n        </Link>\r\n        <button onClick={handleDelete} className=\"btn btn-error\">\r\n          Delete Machine\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MachineDetail;\r\n","/**\r\n * Utility functions for handling date conversion and formatting\r\n * This ensures consistent date handling across the application\r\n */\r\n\r\n/**\r\n * Safely converts a date value to a Date object\r\n * Handles both Date objects and date strings from IndexedDB\r\n */\r\nexport const toDate = (dateValue: Date | string | undefined | null): Date | null => {\r\n  if (!dateValue) return null;\r\n  if (dateValue instanceof Date) return dateValue;\r\n  return new Date(dateValue);\r\n};\r\n\r\n/**\r\n * Safely formats a date value to a localized date string\r\n * Returns 'Never' for null/undefined values\r\n */\r\nexport const formatDate = (dateValue: Date | string | undefined | null): string => {\r\n  const date = toDate(dateValue);\r\n  if (!date) return 'Never';\r\n  return date.toLocaleDateString();\r\n};\r\n\r\n/**\r\n * Safely formats a date value to a localized date and time string\r\n * Returns 'Never' for null/undefined values\r\n */\r\nexport const formatDateTime = (dateValue: Date | string | undefined | null): string => {\r\n  const date = toDate(dateValue);\r\n  if (!date) return 'Never';\r\n  return date.toLocaleString();\r\n};\r\n\r\n/**\r\n * Formats a date for relative time display (e.g., \"2 hours ago\")\r\n */\r\nexport const formatRelativeTime = (dateValue: Date | string | undefined | null): string => {\r\n  const date = toDate(dateValue);\r\n  if (!date) return 'Never';\r\n  \r\n  const now = new Date();\r\n  const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n  \r\n  if (diffInMinutes < 1) return 'Just now';\r\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\r\n  if (diffInMinutes < 10080) return `${Math.floor(diffInMinutes / 1440)}d ago`;\r\n  return date.toLocaleDateString();\r\n};\r\n\r\n/**\r\n * Formats a date for relative time display in hours (e.g., \"2 hours ago\")\r\n */\r\nexport const formatRelativeTimeHours = (dateValue: Date | string | undefined | null): string => {\r\n  const date = toDate(dateValue);\r\n  if (!date) return 'Never';\r\n  \r\n  const now = new Date();\r\n  const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\r\n  \r\n  if (diffInHours < 1) return 'Just now';\r\n  if (diffInHours < 24) return `${diffInHours}h ago`;\r\n  if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`;\r\n  return date.toLocaleDateString();\r\n};\r\n","import { AnyDeskLaunchResult } from '../types/machine.types';\r\nimport { indexedDBService } from './indexedDB.service';\r\n\r\nclass AnyDeskService {\r\n  /**\r\n   * Launches AnyDesk with the specified machine ID\r\n   */\r\n  async launchAnyDesk(machineId: string): Promise<AnyDeskLaunchResult> {\r\n    try {\r\n      // Get machine details\r\n      const machine = await indexedDBService.getMachine(machineId);\r\n      if (!machine) {\r\n        return {\r\n          success: false,\r\n          method: 'failed',\r\n          error: 'Machine not found'\r\n        };\r\n      }\r\n\r\n      // Log connection attempt\r\n      await indexedDBService.logConnectionAttempt(machineId, 'launch_attempt');\r\n\r\n      // Try AnyDesk URL scheme first\r\n      const anydeskUrl = `anydesk://${machine.anydeskId}`;\r\n      const fallbackUrl = `https://anydesk.com/${machine.anydeskId}`;\r\n\r\n      try {\r\n        // Attempt to open AnyDesk app\r\n        const opened = await this.openAnyDeskApp(anydeskUrl);\r\n        \r\n        if (opened) {\r\n          // Log successful launch attempt\r\n          await indexedDBService.logConnectionAttempt(machineId, 'launch_success', 'AnyDesk app launched');\r\n          \r\n          return {\r\n            success: true,\r\n            method: 'app'\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.log('AnyDesk app not available, trying web fallback');\r\n      }\r\n\r\n      // Fallback to web version\r\n      try {\r\n        window.open(fallbackUrl, '_blank');\r\n        \r\n        // Log web fallback attempt\r\n        await indexedDBService.logConnectionAttempt(machineId, 'launch_attempt', 'Opened web version');\r\n        \r\n        return {\r\n          success: true,\r\n          method: 'web'\r\n        };\r\n      } catch (error) {\r\n        await indexedDBService.logConnectionAttempt(machineId, 'launch_failure', `Web fallback failed: ${error}`);\r\n        \r\n        return {\r\n          success: false,\r\n          method: 'failed',\r\n          error: 'Failed to open AnyDesk app or web version'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('AnyDesk launch error:', error);\r\n      \r\n      // Log failure\r\n      await indexedDBService.logConnectionAttempt(machineId, 'launch_failure', `Launch error: ${error}`);\r\n      \r\n      return {\r\n        success: false,\r\n        method: 'failed',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to open AnyDesk application using URL scheme\r\n   */\r\n  private async openAnyDeskApp(url: string): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      // Create a hidden iframe to attempt the URL scheme\r\n      const iframe = document.createElement('iframe');\r\n      iframe.style.display = 'none';\r\n      iframe.src = url;\r\n      \r\n      // Timeout to detect if the app opened\r\n      const timeout = setTimeout(() => {\r\n        document.body.removeChild(iframe);\r\n        resolve(false);\r\n      }, 2000);\r\n\r\n      // Listen for focus events to detect if app opened\r\n      const handleFocus = () => {\r\n        clearTimeout(timeout);\r\n        document.body.removeChild(iframe);\r\n        window.removeEventListener('focus', handleFocus);\r\n        resolve(true);\r\n      };\r\n\r\n      window.addEventListener('focus', handleFocus);\r\n      document.body.appendChild(iframe);\r\n\r\n      // Also try direct window.location as fallback\r\n      try {\r\n        window.location.href = url;\r\n        setTimeout(() => {\r\n          clearTimeout(timeout);\r\n          document.body.removeChild(iframe);\r\n          window.removeEventListener('focus', handleFocus);\r\n          resolve(true);\r\n        }, 1000);\r\n      } catch (error) {\r\n        // Ignore errors, let the iframe method handle it\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if AnyDesk is likely installed on the system\r\n   */\r\n  async checkAnyDeskAvailability(): Promise<boolean> {\r\n    try {\r\n      // Try to detect AnyDesk installation\r\n      // This is a simple heuristic - in reality, we can't reliably detect\r\n      // if AnyDesk is installed without user interaction\r\n      \r\n      // For now, we'll assume it might be available and let the launch attempt determine\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error checking AnyDesk availability:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets AnyDesk download URL for the current platform\r\n   */\r\n  getAnyDeskDownloadUrl(): string {\r\n    const userAgent = navigator.userAgent.toLowerCase();\r\n    \r\n    if (userAgent.includes('windows')) {\r\n      return 'https://anydesk.com/downloads/windows';\r\n    } else if (userAgent.includes('mac')) {\r\n      return 'https://anydesk.com/downloads/macos';\r\n    } else if (userAgent.includes('linux')) {\r\n      return 'https://anydesk.com/downloads/linux';\r\n    } else if (userAgent.includes('android')) {\r\n      return 'https://play.google.com/store/apps/details?id=com.anydesk.anydeskandroid';\r\n    } else if (userAgent.includes('iphone') || userAgent.includes('ipad')) {\r\n      return 'https://apps.apple.com/app/anydesk/id1114002967';\r\n    }\r\n    \r\n    return 'https://anydesk.com/downloads';\r\n  }\r\n\r\n  /**\r\n   * Formats AnyDesk ID for display (adds spaces for readability)\r\n   */\r\n  formatAnyDeskId(id: string): string {\r\n    // Remove any non-numeric characters\r\n    const cleanId = id.replace(/\\D/g, '');\r\n    \r\n    // Add spaces every 3 digits for readability\r\n    return cleanId.replace(/(\\d{3})(?=\\d)/g, '$1 ');\r\n  }\r\n\r\n  /**\r\n   * Validates AnyDesk ID format\r\n   */\r\n  isValidAnyDeskId(id: string): boolean {\r\n    // AnyDesk IDs are typically 9 digits\r\n    const cleanId = id.replace(/\\D/g, '');\r\n    return cleanId.length === 9 && /^\\d+$/.test(cleanId);\r\n  }\r\n\r\n  /**\r\n   * Shows user-friendly message based on launch result\r\n   */\r\n  getLaunchMessage(result: AnyDeskLaunchResult, machineName: string): string {\r\n    if (result.success) {\r\n      if (result.method === 'app') {\r\n        return `AnyDesk app opened for ${machineName}. If the connection doesn't start automatically, enter the ID: ${result.method}`;\r\n      } else if (result.method === 'web') {\r\n        return `AnyDesk web version opened for ${machineName}. You can also download the AnyDesk app for better experience.`;\r\n      }\r\n    }\r\n    \r\n    return `Failed to launch AnyDesk for ${machineName}. ${result.error || 'Please ensure AnyDesk is installed or try again.'}`;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const anydeskService = new AnyDeskService();\r\n","import React, { useState } from 'react';\r\nimport { anydeskService } from '../services/anydesk.service';\r\nimport { AnyDeskLaunchResult } from '../types/machine.types';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport './AnydeskLaunchButton.css';\r\n\r\ninterface AnydeskLaunchButtonProps {\r\n  machineId: string;\r\n  machineName: string;\r\n  anydeskId: string;\r\n  size?: 'sm' | 'md' | 'lg';\r\n  variant?: 'primary' | 'secondary' | 'icon';\r\n  onLaunchResult?: (result: AnyDeskLaunchResult) => void;\r\n  className?: string;\r\n}\r\n\r\nconst AnydeskLaunchButton: React.FC<AnydeskLaunchButtonProps> = ({\r\n  machineId,\r\n  machineName,\r\n  anydeskId,\r\n  size = 'md',\r\n  variant = 'primary',\r\n  onLaunchResult,\r\n  className = ''\r\n}) => {\r\n  const [isLaunching, setIsLaunching] = useState(false);\r\n  const [lastResult, setLastResult] = useState<AnyDeskLaunchResult | null>(null);\r\n\r\n  const handleLaunch = async () => {\r\n    if (isLaunching) return;\r\n\r\n    try {\r\n      setIsLaunching(true);\r\n      setLastResult(null);\r\n\r\n      const result = await anydeskService.launchAnyDesk(machineId);\r\n      setLastResult(result);\r\n      \r\n      if (onLaunchResult) {\r\n        onLaunchResult(result);\r\n      }\r\n\r\n      // Show user feedback\r\n      const message = anydeskService.getLaunchMessage(result, machineName);\r\n      \r\n      if (result.success) {\r\n        // Show success message briefly\r\n        if (result.method === 'web') {\r\n          alert(`✅ ${message}\\n\\n💡 Tip: Download AnyDesk app for better experience!`);\r\n        } else {\r\n          alert(`✅ ${message}`);\r\n        }\r\n      } else {\r\n        // Show error message with download option\r\n        const shouldDownload = window.confirm(`❌ ${message}\\n\\nWould you like to download AnyDesk?`);\r\n        if (shouldDownload) {\r\n          window.open(anydeskService.getAnyDeskDownloadUrl(), '_blank');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Launch error:', error);\r\n      const errorResult: AnyDeskLaunchResult = {\r\n        success: false,\r\n        method: 'failed',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n      setLastResult(errorResult);\r\n      \r\n      if (onLaunchResult) {\r\n        onLaunchResult(errorResult);\r\n      }\r\n      \r\n      alert(`❌ Failed to launch AnyDesk: ${errorResult.error}`);\r\n    } finally {\r\n      setIsLaunching(false);\r\n    }\r\n  };\r\n\r\n  const getButtonText = () => {\r\n    if (isLaunching) {\r\n      return size === 'sm' ? '...' : 'Launching...';\r\n    }\r\n    \r\n    switch (variant) {\r\n      case 'icon':\r\n        return '🚀';\r\n      case 'secondary':\r\n        return `Connect to ${machineName}`;\r\n      default:\r\n        return 'Launch AnyDesk';\r\n    }\r\n  };\r\n\r\n  const getButtonClass = () => {\r\n    const baseClass = 'anydesk-launch-btn';\r\n    const sizeClass = `anydesk-launch-btn-${size}`;\r\n    const variantClass = `anydesk-launch-btn-${variant}`;\r\n    const stateClass = isLaunching ? 'anydesk-launch-btn-loading' : '';\r\n    const resultClass = lastResult ? `anydesk-launch-btn-${lastResult.success ? 'success' : 'error'}` : '';\r\n    \r\n    return `${baseClass} ${sizeClass} ${variantClass} ${stateClass} ${resultClass} ${className}`.trim();\r\n  };\r\n\r\n  const getButtonIcon = () => {\r\n    if (isLaunching) {\r\n      return <LoadingSpinner size={size === 'sm' ? 'sm' : 'md'} />;\r\n    }\r\n    \r\n    if (lastResult?.success) {\r\n      return '✅';\r\n    }\r\n    \r\n    if (lastResult && !lastResult.success) {\r\n      return '❌';\r\n    }\r\n    \r\n    return '🚀';\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={getButtonClass()}\r\n      onClick={handleLaunch}\r\n      disabled={isLaunching}\r\n      title={`Launch AnyDesk for ${machineName} (ID: ${anydeskId})`}\r\n    >\r\n      <span className=\"anydesk-launch-btn-icon\">{getButtonIcon()}</span>\r\n      <span className=\"anydesk-launch-btn-text\">{getButtonText()}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AnydeskLaunchButton;\r\n"],"names":["PasswordItem","_ref","password","index","isVisible","setIsVisible","useState","_jsxs","className","children","_jsx","repeat","length","onClick","navigator","clipboard","writeText","alert","MachineDetail","id","useParams","navigate","useNavigate","machine","setMachine","loading","setLoading","useEffect","loadMachine","async","machineData","indexedDBService","getMachine","machineId","error","console","LoadingSpinner","size","Link","to","name","title","anydeskId","AnydeskLaunchButton","machineName","variant","address","formatDate","createdAt","lastAccessed","connectionCount","notes","passwords","map","tags","tag","categories","category","concat","window","confirm","deleteMachine","toDate","dateValue","Date","date","toLocaleDateString","formatRelativeTime","now","diffInMinutes","Math","floor","getTime","formatRelativeTimeHours","diffInHours","anydeskService","launchAnyDesk","success","method","logConnectionAttempt","anydeskUrl","fallbackUrl","this","openAnyDeskApp","log","open","Error","message","url","Promise","resolve","iframe","document","createElement","style","display","src","timeout","setTimeout","body","removeChild","handleFocus","clearTimeout","removeEventListener","addEventListener","appendChild","location","href","checkAnyDeskAvailability","getAnyDeskDownloadUrl","userAgent","toLowerCase","includes","formatAnyDeskId","replace","isValidAnyDeskId","cleanId","test","getLaunchMessage","result","onLaunchResult","isLaunching","setIsLaunching","lastResult","setLastResult","getButtonClass","sizeClass","variantClass","stateClass","resultClass","trim","errorResult","disabled","getButtonText"],"sourceRoot":""}