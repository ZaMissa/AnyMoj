{"version":3,"file":"static/js/0.ef2cb366.chunk.js","mappings":"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","sources":["pages/MachineEdit.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link, useNavigate } from 'react-router-dom';\r\nimport { Machine, MachineFormData } from '../types/machine.types';\r\nimport { indexedDBService } from '../services/indexedDB.service';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\n\r\nconst MachineEdit: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [formData, setFormData] = useState<MachineFormData>({\r\n    name: '',\r\n    anydeskId: '',\r\n    address: '',\r\n    passwords: [''],\r\n    notes: '',\r\n    categories: [],\r\n    tags: [],\r\n    customFields: [],\r\n  });\r\n\r\n  const isEditing = id && id !== 'new';\r\n\r\n  useEffect(() => {\r\n    if (isEditing && id) {\r\n      loadMachine(id);\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [id, isEditing]);\r\n\r\n  const loadMachine = async (machineId: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const machine = await indexedDBService.getMachine(machineId);\r\n      if (machine) {\r\n        setFormData({\r\n          name: machine.name,\r\n          anydeskId: machine.anydeskId,\r\n          address: machine.address || '',\r\n          passwords: machine.passwords.length > 0 ? machine.passwords : [''],\r\n          notes: machine.notes || '',\r\n          categories: machine.categories,\r\n          tags: machine.tags,\r\n          customFields: machine.customFields,\r\n        });\r\n      } else {\r\n        navigate('/');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load machine:', error);\r\n      navigate('/');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: keyof MachineFormData, value: any) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const handlePasswordChange = (index: number, value: string) => {\r\n    const newPasswords = [...formData.passwords];\r\n    newPasswords[index] = value;\r\n    setFormData(prev => ({ ...prev, passwords: newPasswords }));\r\n  };\r\n\r\n  const addPassword = () => {\r\n    setFormData(prev => ({ ...prev, passwords: [...prev.passwords, ''] }));\r\n  };\r\n\r\n  const removePassword = (index: number) => {\r\n    if (formData.passwords.length > 1) {\r\n      const newPasswords = formData.passwords.filter((_, i) => i !== index);\r\n      setFormData(prev => ({ ...prev, passwords: newPasswords }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.name.trim() || !formData.anydeskId.trim()) {\r\n      alert('Name and AnyDesk ID are required');\r\n      return;\r\n    }\r\n\r\n    // Validate AnyDesk ID format (should be numeric)\r\n    if (!/^\\d+$/.test(formData.anydeskId.trim())) {\r\n      alert('AnyDesk ID must contain only numbers');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSaving(true);\r\n      \r\n      // Check if AnyDesk ID already exists (if creating new machine or changing ID)\r\n      if (!isEditing || formData.anydeskId !== (await indexedDBService.getMachine(id!))?.anydeskId) {\r\n        const existingMachine = await indexedDBService.getMachineByAnyDeskId(formData.anydeskId.trim());\r\n        if (existingMachine && existingMachine.id !== id) {\r\n          alert('A machine with this AnyDesk ID already exists');\r\n          return;\r\n        }\r\n      }\r\n      \r\n      const machineData: Machine = {\r\n        id: isEditing ? id! : crypto.randomUUID(),\r\n        name: formData.name.trim(),\r\n        anydeskId: formData.anydeskId.trim(),\r\n        address: formData.address.trim() || undefined,\r\n        passwords: formData.passwords.filter(p => p.trim()),\r\n        notes: formData.notes.trim() || undefined,\r\n        categories: formData.categories,\r\n        tags: formData.tags,\r\n        customFields: formData.customFields,\r\n        createdAt: isEditing ? (await indexedDBService.getMachine(id!))!.createdAt : new Date(),\r\n        updatedAt: new Date(),\r\n        lastAccessed: isEditing ? (await indexedDBService.getMachine(id!))!.lastAccessed : undefined,\r\n        connectionCount: isEditing ? (await indexedDBService.getMachine(id!))!.connectionCount : 0,\r\n      };\r\n\r\n      if (isEditing) {\r\n        await indexedDBService.updateMachine(machineData);\r\n      } else {\r\n        await indexedDBService.addMachine(machineData);\r\n      }\r\n\r\n      navigate(`/machine/${machineData.id}`);\r\n    } catch (error) {\r\n      console.error('Failed to save machine:', error);\r\n      alert('Failed to save machine. Please try again.');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"page-loading\">\r\n        <LoadingSpinner size=\"lg\" />\r\n        <p>Loading machine data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"machine-edit\">\r\n      <div className=\"page-header\">\r\n        <Link to={isEditing ? `/machine/${id}` : '/'} className=\"btn btn-secondary\">\r\n          ← {isEditing ? 'Back to Machine' : 'Back to Dashboard'}\r\n        </Link>\r\n        <h1 className=\"page-title\">\r\n          {isEditing ? 'Edit Machine' : 'Add New Machine'}\r\n        </h1>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit} className=\"machine-form\">\r\n        <div className=\"form-section\">\r\n          <h3>Basic Information</h3>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Machine Name *</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-input\"\r\n              value={formData.name}\r\n              onChange={(e) => handleInputChange('name', e.target.value)}\r\n              placeholder=\"Enter machine name\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">AnyDesk ID *</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-input\"\r\n              value={formData.anydeskId}\r\n              onChange={(e) => handleInputChange('anydeskId', e.target.value)}\r\n              placeholder=\"Enter AnyDesk ID\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Address/IP</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-input\"\r\n              value={formData.address}\r\n              onChange={(e) => handleInputChange('address', e.target.value)}\r\n              placeholder=\"Enter IP address or hostname\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n          <h3>Passwords</h3>\r\n          {formData.passwords.map((password, index) => (\r\n            <div key={index} className=\"password-input-group\">\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-input\"\r\n                value={password}\r\n                onChange={(e) => handlePasswordChange(index, e.target.value)}\r\n                placeholder=\"Enter password\"\r\n              />\r\n              {formData.passwords.length > 1 && (\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-error btn-sm\"\r\n                  onClick={() => removePassword(index)}\r\n                >\r\n                  Remove\r\n                </button>\r\n              )}\r\n            </div>\r\n          ))}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary btn-sm\"\r\n            onClick={addPassword}\r\n          >\r\n            Add Password\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n          <h3>Additional Information</h3>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Notes</label>\r\n            <textarea\r\n              className=\"form-input form-textarea\"\r\n              value={formData.notes}\r\n              onChange={(e) => handleInputChange('notes', e.target.value)}\r\n              placeholder=\"Enter any additional notes\"\r\n              rows={4}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-actions\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary\"\r\n            disabled={saving}\r\n          >\r\n            {saving ? <LoadingSpinner size=\"sm\" /> : (isEditing ? 'Update Machine' : 'Create Machine')}\r\n          </button>\r\n          <Link\r\n            to={isEditing ? `/machine/${id}` : '/'}\r\n            className=\"btn btn-secondary\"\r\n          >\r\n            Cancel\r\n          </Link>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MachineEdit;\r\n"],"names":["MachineEdit","id","useParams","navigate","useNavigate","loading","setLoading","useState","saving","setSaving","formData","setFormData","name","anydeskId","address","passwords","notes","categories","tags","customFields","isEditing","useEffect","loadMachine","async","machine","indexedDBService","getMachine","machineId","length","error","console","handleInputChange","field","value","prev","_objectSpread","_jsxs","className","children","_jsx","LoadingSpinner","size","Link","to","concat","onSubmit","e","preventDefault","trim","test","_await$indexedDBServi","existingMachine","getMachineByAnyDeskId","alert","machineData","crypto","randomUUID","undefined","filter","p","createdAt","Date","updatedAt","lastAccessed","connectionCount","updateMachine","addMachine","type","onChange","target","placeholder","required","map","password","index","handlePasswordChange","newPasswords","onClick","_","i","removePassword","addPassword","rows","disabled"],"sourceRoot":""}